from aiogram import Router, F, Bot
from aiogram.types import Message, PhotoSize
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from pathlib import Path
from ..database.admins import is_admin

router = Router()

class AddHomyak(StatesGroup):
    waiting_for_image = State()
    waiting_for_name = State()
    waiting_for_rarity = State()

@router.message(F.text == "/addh")
async def cmd_addh(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id) and message.from_user.id != 8142801405:
        return
    await message.answer("üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–æ–º—è–∫–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç):")
    await state.set_state(AddHomyak.waiting_for_image)

@router.message(AddHomyak.waiting_for_image, F.photo)
async def photo_received(message: Message, state: FSMContext, bot: Bot):
    photo: PhotoSize = message.photo[-1]

    files_dir = Path(__file__).parent.parent / "files"
    files_dir.mkdir(exist_ok=True)

    file_path = files_dir / f"temp_{message.from_user.id}.png"
    file = await bot.get_file(photo.file_id)
    await bot.download_file(file.file_path, destination=file_path)

    await state.update_data(image_path=str(file_path))
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–æ–º—è–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π —Ö–æ–º—è–∫¬ª):")
    await state.set_state(AddHomyak.waiting_for_name)

@router.message(AddHomyak.waiting_for_image)
async def photo_invalid(message: Message, state: FSMContext):
    attempts = await state.get_data()
    failed_attempts = attempts.get("failed_attempts", 0)

    if not message.photo:
        failed_attempts += 1
        await state.update_data(failed_attempts=failed_attempts)

        if failed_attempts >= 3:
            await state.clear()
            await message.answer("‚ùå –¢—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ")
            return

        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return

    await state.update_data(failed_attempts=0)

@router.message(AddHomyak.waiting_for_name)
async def name_received(message: Message, state: FSMContext):
    homyak_name = message.text.strip()
    if homyak_name.startswith("/") or not homyak_name:
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    data = await state.get_data()
    temp_path = data.get("image_path")
    if not temp_path:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    await state.update_data(homyak_name=homyak_name)
    await message.answer(
        "üåü –£–∫–∞–∂–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å:\n"
        "1 ‚Äî –û–±—ã—á–Ω–∞—è\n"
        "2 ‚Äî –†–µ–¥–∫–∞—è\n"
        "3 ‚Äî –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è\n"
        "4 ‚Äî –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è\n"
        "5 ‚Äî –°–µ–∫—Ä–µ—Ç–Ω—ã–π"
    )
    await state.set_state(AddHomyak.waiting_for_rarity)

@router.message(AddHomyak.waiting_for_rarity)
async def rarity_received(message: Message, state: FSMContext):
    try:
        rarity = int(message.text.strip())
        if rarity not in [1, 2, 3, 4, 5]:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:")
        return

    data = await state.get_data()
    homyak_name = data["homyak_name"]
    temp_path = data["image_path"]

    temp_file = Path(temp_path)
    final_name = f"{homyak_name}.png"
    final_path = temp_file.parent / final_name

    if final_path.exists():
        await message.answer(f"‚ö†Ô∏è –•–æ–º—è–∫ —Å –∏–º–µ–Ω–µ–º ¬´{homyak_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    temp_file.rename(final_path)

    from ..database.rarity import set_rarity
    await set_rarity(final_name, rarity)

    rarity_names = {1: "–û–±—ã—á–Ω–∞—è", 2: "–†–µ–¥–∫–∞—è", 3: "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", 4: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", 5: "–°–µ–∫—Ä–µ—Ç–Ω–∞—è"}
    await message.answer(f"‚úÖ –•–æ–º—è–∫ ¬´{homyak_name}¬ª ({rarity_names[rarity]}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()