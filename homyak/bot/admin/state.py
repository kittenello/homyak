from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite
from ..config import RARITY_DB_PATH
from pathlib import Path
from ..database.admins import is_admin
from ..database.rarity import get_rarity, RARITY_NAMES, RARITY_POINTS
import logging
from pathlib import Path
import re
import os

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

router = Router()

class HomyakState(StatesGroup):
    waiting_for_name = State()
    renaming_homyak = State()
    viewing_homyak = State()
    changing_rarity = State()

HOMYAK_FILES_DIR = Path(__file__).parent.parent / "files"

@router.message(F.text == "/state")
async def cmd_state(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id) and message.from_user.id != 8142801405:
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏", callback_data="state_find")]
    ])
    await message.answer("üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–º—è–∫–∞–º–∏</b>\n–ù–∞–∂–º–∏—Ç–µ –ù–∞–π—Ç–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", 
                        reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "state_find")
async def find_homyak(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–æ–º—è–∫–∞:")
    await state.set_state(HomyakState.waiting_for_name)
    await callback_query.answer()

@router.message(HomyakState.waiting_for_name)
async def process_homyak_name(message: Message, state: FSMContext, bot: Bot):
    query = message.text.strip()
    if query.startswith("/") or not query:
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    all_files = [
        f.name for f in HOMYAK_FILES_DIR.glob("*.png")
        if f.name.lower() != "welcome.mp4"
    ]

    matches = []
    query_lower = query.lower()
    for filename in all_files:
        name_without_ext = filename[:-4]
        if query_lower in name_without_ext.lower():
            matches.append(filename)

    attempts = await state.get_data()
    failed_attempts = attempts.get("failed_attempts", 0)

    if not matches:
        failed_attempts += 1
        await state.update_data(failed_attempts=failed_attempts)

        if failed_attempts >= 3:
            await state.clear()
            await message.answer("‚ùå –¢—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return

        await message.answer("‚ùå –•–æ–º—è–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    await state.update_data(failed_attempts=0)

    if len(matches) == 1:
        await show_homyak_details(message, matches[0], state)
    else:
        buttons = []
        for filename in matches[:10]:
            name = filename[:-4]
            buttons.append([InlineKeyboardButton(text=name, callback_data=f"state_select_{filename}")])
        
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="state_find")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–º—è–∫–æ–≤:", reply_markup=keyboard)

async def show_homyak_details(message: Message, filename: str, state: FSMContext):
    
    file_path = HOMYAK_FILES_DIR / filename
    homyak_name = filename[:-4]

    rarity_id = await get_rarity(filename)
    points = RARITY_POINTS[rarity_id]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"state_delete_{filename}")],  # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"state_rename_{filename}")],
        [InlineKeyboardButton(text="üåü –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∫–æ—Å—Ç—å", callback_data=f"state_change_rarity_{filename}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="state_find")]
    ])

    caption = (
        f"ü™Ñ <b>{homyak_name}</b>\n\n"
        f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {RARITY_NAMES[rarity_id]}\n"
        f"‚ú® –û—á–∫–∏: {points}\n"
    )

    await message.answer_photo(
        photo=FSInputFile(file_path),
        caption=caption,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.update_data(current_filename=filename)
    await state.set_state(HomyakState.viewing_homyak)

@router.callback_query(F.data.startswith("state_delete_"))
async def delete_homyak(callback_query: CallbackQuery, state: FSMContext):
    try:
        import re
        match = re.search(r"state_delete_(.*)", callback_query.data)
        if match:
            filename = match.group(1)  # –≠—Ç–æ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞.")
            return

        file_path = Path(HOMYAK_FILES_DIR) / filename  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        print(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {file_path}")

        if file_path.exists():
            file_path.unlink()  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            print(f"–§–∞–π–ª {filename} —É–¥–∞–ª—ë–Ω.")
        else:
            await callback_query.message.edit_caption(caption="‚ùå –§–∞–π–ª —É–∂–µ —É–¥–∞–ª—ë–Ω.")
            await state.clear()
            await callback_query.answer()
            return

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.)
        from ..database.rarity import remove_rarity
        await remove_rarity(filename)

        from ..database.cards import remove_homyak_from_all_users
        await remove_homyak_from_all_users(filename)

        await callback_query.message.edit_caption(caption="‚úÖ –•–æ–º—è–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω!")
    except Exception as e:
        await callback_query.message.edit_caption(caption=f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    await state.clear()
    await callback_query.answer()

@router.callback_query(F.data == "state_rename_current")
async def rename_homyak_start(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filename = data.get("current_filename")
    if not filename:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.update_data(rename_filename=filename)
    await state.set_state(HomyakState.renaming_homyak)
    await callback_query.answer()

@router.message(HomyakState.renaming_homyak)
async def rename_homyak_process(message: Message, state: FSMContext):
    new_name = message.text.strip()
    if new_name.startswith("/") or not new_name:
        await state.clear()
        await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    data = await state.get_data()
    old_filename = data.get("rename_filename")
    if not old_filename:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    old_filename_no_ext, old_ext = old_filename.rsplit('.', 1)
    old_filename_normalized = old_filename_no_ext + '.' + old_ext
    new_filename_normalized = new_name.strip() + ".png"

    old_path = HOMYAK_FILES_DIR / old_filename_normalized
    new_path = HOMYAK_FILES_DIR / new_filename_normalized

    logger.info(f"–°—Ç–∞—Ä—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞: {old_path}")
    logger.info(f"–ù–æ–≤—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞: {new_path}")

    if new_path.exists():
        await state.clear()
        await message.answer("‚ùå –•–æ–º—è–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /state")
        return

    if not old_path.exists():
        await state.clear()
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {old_path}")
        await message.answer("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /state")
        return

    try:
        old_path.rename(new_path)

        from ..database.rarity import get_rarity, set_rarity
        rarity = await get_rarity(old_filename)
        await set_rarity(new_filename_normalized, rarity)

        from ..database.rarity import remove_rarity
        await remove_rarity(old_filename)

        from ..database.cards import rename_homyak_in_cards
        await rename_homyak_in_cards(old_filename, new_filename_normalized)

        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{new_name}¬ª.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. {e}")
    finally:
        await state.clear()


@router.callback_query(F.data.startswith("state_change_rarity_"))
async def change_rarity_start(callback_query: CallbackQuery, state: FSMContext):
    filename = callback_query.data[len("state_change_rarity_"):]

    await state.update_data(change_rarity_filename=filename)
    
    rarity_buttons = [
        [InlineKeyboardButton(text="1 ‚Äî –û–±—ã—á–Ω–∞—è", callback_data="rarity_1")],
        [InlineKeyboardButton(text="2 ‚Äî –†–µ–¥–∫–∞—è", callback_data="rarity_2")],
        [InlineKeyboardButton(text="3 ‚Äî –ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", callback_data="rarity_3")],
        [InlineKeyboardButton(text="4 ‚Äî –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", callback_data="rarity_4")],
        [InlineKeyboardButton(text="5 ‚Äî –°–µ–∫—Ä–µ—Ç–Ω—ã–π", callback_data="rarity_5")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="state_cancel_rarity")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=rarity_buttons)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ–¥–∫–æ—Å—Ç—å:", reply_markup=keyboard)
    await state.set_state(HomyakState.changing_rarity)
    await callback_query.answer()

@router.callback_query(F.data.startswith("rarity_"))
async def set_new_rarity(callback_query: CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∏–∑ callback_data
        rarity_str = callback_query.data[len("rarity_"):]
        if not rarity_str:
            raise ValueError("empty")
        
        rarity = int(rarity_str)
        if rarity not in [1, 2, 3, 4, 5]:
            raise ValueError("invalid rarity")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ö–æ–º—è–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        filename = data.get("change_rarity_filename")
        if not filename:
            raise ValueError("Filename not found in state")
        
        homyak_name = filename[:-4]  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .png

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from ..database.rarity import set_rarity
        await set_rarity(homyak_name, rarity)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        rarity_id = await get_rarity(f"{homyak_name}.png")
        print(f"Rarity updated to {rarity_id} for {homyak_name}")

        # –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarity_names = {1: "–û–±—ã—á–Ω–∞—è", 2: "–†–µ–¥–∫–∞—è", 3: "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", 4: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", 5: "–°–µ–∫—Ä–µ—Ç–Ω—ã–π"}
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback_query.message.delete()
        await callback_query.message.answer(f"‚úÖ –†–µ–¥–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ¬´{rarity_names[rarity]}¬ª!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ–º—è–∫–∞ —Å –Ω–æ–≤–æ–π —Ä–µ–¥–∫–æ—Å—Ç—å—é
        await show_homyak_details(callback_query.message, homyak_name, state)
        
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()

@router.callback_query(F.data == "state_cancel_rarity")
async def cancel_rarity_change(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filename = data.get("change_rarity_filename", "")
    if filename:
        await show_homyak_details(callback_query.message, filename, state)
    else:
        await callback_query.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback_query.answer()