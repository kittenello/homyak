from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from difflib import SequenceMatcher
from pathlib import Path
from ..handlers.homyak import HOMYAK_FILES_DIR
from ..database.shoph import add_item, list_items, delete_item
from aiogram.fsm.context import FSMContext
from ..database.bundles import add_bundle, list_bundles, delete_bundle
from aiogram.fsm.state import StatesGroup, State
from ..database.admins import is_admin

router = Router()

class SetShopStates(StatesGroup):
    waiting_name = State()
    waiting_price_coins = State()
    waiting_price_stars = State()
    waiting_stock = State()
    waiting_confirm = State()
    waiting_bundle_name = State()
    waiting_bundle_price_coins = State()
    waiting_bundle_price_stars = State()
    waiting_bundle_stock = State()
    waiting_bundle_items = State()
    waiting_bundle_confirm = State() 

@router.message(Command(commands=["setshop"]))
async def cmd_setshop(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await is_admin(user_id):
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="setshop:action:add")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="setshop:action:delete")],
        [InlineKeyboardButton(text="üì¶ –ù–∞–±–æ—Ä—ã", callback_data="setshop:action:bundles")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:", reply_markup=kb)
    await state.clear()

@router.callback_query(lambda c: c.data and c.data.startswith("setshop:action:"))
async def setshop_action_cb(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    if not await is_admin(user_id):
        return

    action = query.data.split(":", 2)[2]
    if action == "add":
        await state.clear()
        await state.set_state(SetShopStates.waiting_name)
        await query.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–æ–º—è–∫–∞ (—á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        await query.answer()
        return

    if action == "delete":
        items = await list_items()
        if not items:
            await query.message.edit_text("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await query.answer()
            return
        rows = []
        for it in items:
            rows.append([InlineKeyboardButton(text=f"{it['name']} ‚Ä¢ {it['price_coins']} / {it['price_stars']} ‚Ä¢ stock:{it['stock']}", callback_data=f"setshop:del:{it['id']}")])
        rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="setshop:cancel")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
        await query.answer()
        return
    
    if action == "bundles":
        print("1")
        user_id = query.from_user.id
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä", callback_data="setshop:bundles:create")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä", callback_data="setshop:bundles:delete")],
            [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="setshop:action:back")]
        ])
        await query.message.edit_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞–º–∏:", reply_markup=kb)
        await query.answer()
        return
    
@router.callback_query(lambda c: c.data and c.data.startswith("setshop:del:"))
async def setshop_delete_pick(query: CallbackQuery):
    user_id = query.from_user.id
    if not await is_admin(user_id):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    item_id = int(query.data.split(":", 2)[2])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"setshop:del_confirm:{item_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="setshop:cancel")]
    ])
    await query.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ID {item_id}?", reply_markup=kb)
    await query.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("setshop:del_confirm:"))
async def setshop_delete_confirm(query: CallbackQuery):
    user_id = query.from_user.id
    if not await is_admin(user_id):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    item_id = int(query.data.split(":", 2)[2])
    ok = await delete_item(item_id)
    if ok:
        await query.message.edit_text("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.")
    else:
        await query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ –Ω–µ—Ç).")
    await query.answer()

@router.message(SetShopStates.waiting_name)
async def process_name(message: Message, state: FSMContext):
    query = message.text.strip().lower()
    files = list(HOMYAK_FILES_DIR.glob("*.png"))
    candidates = []
    for f in files:
        name = f.stem.lower()
        ratio = SequenceMatcher(None, query, name).ratio()
        if ratio >= 0.6:
            candidates.append((f.name, f.stem, ratio))
    
    if not candidates:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Ö–æ–º—è–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –û—Ç–º–µ–Ω–∞")
        return

    buttons = []
    for fname, stem, r in candidates:
        buttons.append([InlineKeyboardButton(text=f"{stem}", callback_data=f"setshop:pick:{fname}")])
    
    buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="setshop:cancel")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–º—è–∫–∞", reply_markup=kb)
    await state.update_data(candidates=[c[0] for c in candidates])
    await state.set_state(SetShopStates.waiting_price_coins)

@router.callback_query(lambda c: c.data and c.data.startswith("setshop:"))
async def setshop_callbacks(query, state: FSMContext):
    data = query.data
    if data == "setshop:cancel":
        await query.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await query.answer()
        return
    if data.startswith("setshop:pick:"):
        filename = data.split(":",2)[2]
        await state.update_data(filename=filename)
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {filename}\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –º–æ–Ω–µ—Ç–∞—Ö")
        await query.answer()
        await state.set_state(SetShopStates.waiting_price_coins)
        return

@router.message(SetShopStates.waiting_price_coins)
async def got_price_coins(message: Message, state: FSMContext):
    try:
        coins = int(message.text.strip())
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    await state.update_data(price_coins=coins)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    await state.set_state(SetShopStates.waiting_price_stars)

@router.message(SetShopStates.waiting_price_stars)
async def got_price_stars(message: Message, state: FSMContext):
    try:
        stars = int(message.text.strip())
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    await state.update_data(price_stars=stars)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (0 = –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)")
    await state.set_state(SetShopStates.waiting_stock)

@router.message(SetShopStates.waiting_stock)
async def got_stock(message: Message, state: FSMContext):
    try:
        stock = int(message.text.strip())
        if stock < 0:
            raise ValueError()
    except:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (0 = –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)")
        return
    data = await state.get_data()
    filename = data.get("filename")
    price_coins = data.get("price_coins", 0)
    price_stars = data.get("price_stars", 0)
    name = Path(filename).stem
    await add_item(filename, name, price_coins, price_stars, stock)
    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω")
    await state.clear()

@router.callback_query(lambda c: c.data and c.data == "setshop:cancel")
async def setshop_cancel(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await query.answer()

# @router.callback_query(lambda c: c.data == "setshop:action:bundles")
# async def setshop_bundles_root(query: CallbackQuery, state: FSMContext):
#     user_id = query.from_user.id
#     print("1")
#     # if not await is_admin(user_id):
#     #     return
#     kb = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä", callback_data="setshop:bundles:create")],
#         [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä", callback_data="setshop:bundles:delete")],
#         [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="setshop:action:back")]
#     ])
#     await query.message.edit_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞–º–∏:", reply_markup=kb)
#     await query.answer()

@router.callback_query(lambda c: c.data == "setshop:action:back")
async def setshop_back(query: CallbackQuery, state: FSMContext):
    if not await is_admin(query.from_user.id):
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="setshop:action:add")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="setshop:action:delete")],
        [InlineKeyboardButton(text="üì¶ –ù–∞–±–æ—Ä—ã", callback_data="setshop:action:bundles")]
    ])
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞:", reply_markup=kb)
    await state.clear()
    await query.answer()

@router.callback_query(lambda c: c.data == "setshop:bundles:create")
async def bundles_create_start(query: CallbackQuery, state: FSMContext):
    print("1")
    if not await is_admin(query.from_user.id):
        return
    await state.clear()
    await state.set_state(SetShopStates.waiting_bundle_name)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞")
    await query.answer()

@router.message(SetShopStates.waiting_bundle_name)
async def bundles_get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(bundle_name=name)
    await state.set_state(SetShopStates.waiting_bundle_items)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ–º—è–∫–æ–≤ –¥–ª—è –Ω–∞–±–æ—Ä–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.")

@router.message(SetShopStates.waiting_bundle_items)
async def bundles_search_cards(message: Message, state: FSMContext):
    q = message.text.strip().lower()
    files = list(HOMYAK_FILES_DIR.glob("*.png"))
    found = [f for f in files if q in f.stem.lower()]
    data = await state.get_data()
    buttons = []
    for f in found[:40]:
        buttons.append([InlineKeyboardButton(text=f"‚ûï {f.stem}", callback_data=f"bundles:toggle:{f.name}")])
    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="bundles:done")])
    buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="setshop:cancel")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ö–æ–º—è–∫–æ–≤ –¥–ª—è –Ω–∞–±–æ—Ä–∞:", reply_markup=kb)

@router.callback_query(lambda c: c.data and c.data.startswith("bundles:toggle:"))
async def bundles_toggle(query: CallbackQuery, state: FSMContext):
    if not await is_admin(query.from_user.id):
        return
    fname = query.data.split(":", 2)[2]
    data = await state.get_data()
    selected = set(data.get("selected", []))
    if fname in selected:
        selected.remove(fname)
    else:
        selected.add(fname)
    await state.update_data(selected=list(selected))
    await query.answer("–í—ã–±—Ä–∞–Ω/—É–¥–∞–ª–µ–Ω —Ö–æ–º—è–∫.")

@router.callback_query(lambda c: c.data == "bundles:done")
async def bundles_done_select(query: CallbackQuery, state: FSMContext):
    if not await is_admin(query.from_user.id):
        return
    data = await state.get_data()
    selected = data.get("selected", [])
    if len(selected) < 2:
        await query.answer("–ù–∞–±–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Ö–æ–º—è–∫–æ–≤.", show_alert=True)
        return
    await state.set_state(SetShopStates.waiting_bundle_price_coins)
    await query.message.edit_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞–±–æ—Ä–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
    await query.answer()

@router.message(SetShopStates.waiting_bundle_price_coins)
async def got_bundle_price_coins(message: Message, state: FSMContext):
    try:
        coins = int(message.text.strip())
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞–±–æ—Ä–∞ –≤ –º–æ–Ω–µ—Ç–∞—Ö")
        return
    await state.update_data(bundle_price_coins=coins)
    await state.set_state(SetShopStates.waiting_bundle_price_stars)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞–±–æ—Ä–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö")

@router.message(SetShopStates.waiting_bundle_price_stars)
async def got_bundle_price_stars(message: Message, state: FSMContext):
    try:
        stars = int(message.text.strip())
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –Ω–∞–±–æ—Ä–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö")
        return
    await state.update_data(bundle_price_stars=stars)
    await state.set_state(SetShopStates.waiting_bundle_stock)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (0 = –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)")

@router.message(SetShopStates.waiting_bundle_stock)
async def got_bundle_stock(message: Message, state: FSMContext):
    try:
        stock = int(message.text.strip())
        if stock < 0:
            raise ValueError()
    except:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–æ—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (0 = –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)")
        return
    data = await state.get_data()
    name = data.get("bundle_name")
    filenames = data.get("selected", [])
    price_coins = data.get("bundle_price_coins", 0)
    price_stars = data.get("bundle_price_stars", 0)
    await add_bundle(name, filenames, price_coins, price_stars, stock)
    await message.answer("–ù–∞–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω")
    await state.clear()

@router.callback_query(lambda c: c.data and c.data.startswith("setshop:bundles:delete"))
async def bundles_delete_menu(query: CallbackQuery, state: FSMContext):
    if not await is_admin(query.from_user.id):
        return
    bundles = await list_bundles()
    if not bundles:
        await query.message.edit_text("–ù–µ—Ç –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await query.answer()
        return
    rows = []
    for b in bundles:
        rows.append([InlineKeyboardButton(
            text=f"{b['name']} ‚Ä¢ {b['price_coins']} –º–æ–Ω–µ—Ç / {b['price_stars']} ‚≠ê ‚Ä¢ stock:{b['stock']}",
            callback_data=f"setshop:bundles:del:{b['id']}"
        )])
    rows.append([InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="setshop:action:bundles")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–±–æ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await query.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("setshop:bundles:del:"))
async def bundles_delete_confirm(query: CallbackQuery, state: FSMContext):
    if not await is_admin(query.from_user.id):
        return
    bundle_id = int(query.data.split(":", 2)[2])
    ok = await delete_bundle(bundle_id)
    await query.message.edit_text("–ù–∞–±–æ—Ä —É–¥–∞–ª—ë–Ω." if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä.")
    await query.answer()