from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from pathlib import Path
from ..database.admins import is_admin
import re
from ..database.promo import create_promo, promo_exists

router = Router()

class PromoCreation(StatesGroup):
    waiting_for_code = State()
    waiting_for_type = State()
    waiting_for_value = State()
    waiting_for_duration = State()
    waiting_for_max_uses = State()
    waiting_for_homyak_selection = State()

HOMYAK_FILES_DIR = Path(__file__).parent.parent / "files"

@router.message(Command("createpromo"))
async def cmd_createpromo(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(PromoCreation.waiting_for_code)

@router.message(PromoCreation.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    code = message.text.strip()
    norm = code.upper()
    if await promo_exists(norm):
        await message.answer("‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    await state.update_data(promo_code=norm)
    if not code:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(promo_code=code)
    await message.answer(
        "–£–∫–∞–∂–∏ —á—Ç–æ –±—É–¥–µ—Ç –≤ –ø—Ä–æ–º–æ–∫–æ–¥–µ:\n"
        "1 - –û—á–∫–∏\n"
        "2 - –•–æ–º—è–∫\n"
        "3 - –°–Ω—è—Ç–∏–µ –ö–î\n"
        "4 - +–û—á–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–º—è–∫–∞"
    )
    await state.set_state(PromoCreation.waiting_for_type)

@router.message(PromoCreation.waiting_for_type)
async def process_type(message: Message, state: FSMContext):
    attempts = await state.get_data()
    failed_attempts = attempts.get("failed_attempts", 0)

    try:
        reward_type = int(message.text.strip())
        if reward_type not in [1, 2, 3, 4]:
            raise ValueError
    except ValueError:
        failed_attempts += 1
        await state.update_data(failed_attempts=failed_attempts)

        if failed_attempts >= 3:
            await state.clear()
            await message.answer("‚ùå –¢—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            return

        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
        return

    await state.update_data(reward_type=reward_type)

    if reward_type == 1:
        await message.answer("üí∞ –°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –≤—ã–¥–∞–≤–∞—Ç—å?")
        await state.set_state(PromoCreation.waiting_for_value)
    elif reward_type == 2:
        await message.answer("üêπ –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ö–æ–º—è–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.set_state(PromoCreation.waiting_for_value)
    elif reward_type == 3:
        await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –º–∞–∫—Å–∏–º—É–º?")
        await state.set_state(PromoCreation.waiting_for_max_uses)
    elif reward_type == 4:
        await message.answer("‚ú® –°–∫–æ–ª—å–∫–æ +–æ—á–∫–æ–≤ –∑–∞ —Ö–æ–º—è–∫–∞?")
        await state.set_state(PromoCreation.waiting_for_value)

@router.message(PromoCreation.waiting_for_value)
async def process_value(message: Message, state: FSMContext):
    data = await state.get_data()
    reward_type = data.get("reward_type")
    attempts = await state.get_data()
    failed_attempts = attempts.get("failed_attempts", 0)

    if reward_type == 1:
        try:
            points = int(message.text.strip())
            if points <= 0:
                raise ValueError
        except ValueError:
            failed_attempts += 1
            await state.update_data(failed_attempts=failed_attempts)

            if failed_attempts >= 3:
                await state.clear()
                await message.answer("‚ùå –¢—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
                return

            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        
        await state.update_data(reward_value=str(points))
        await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –º–∞–∫—Å–∏–º—É–º?")
        await state.set_state(PromoCreation.waiting_for_max_uses)

    elif reward_type == 2:  # <<< –•–æ–º—è–∫–∏
        query = message.text.strip().lower()
        matches = []
        for f in HOMYAK_FILES_DIR.glob("*.png"):
            if f.name.lower() != "welcome.png":
                name = f.stem.lower()
                if query in name:
                    matches.append(f.stem)
        
        if not matches:
            await message.answer("‚ùå –•–æ–º—è–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        buttons = []
        from ..database.rarity import get_rarity, RARITY_NAMES
        for name in matches[:10]:
            rarity_id = await get_rarity(f"{name}.png")
            buttons.append([InlineKeyboardButton(
                text=f"{name} ({RARITY_NAMES[rarity_id]})",
                callback_data=f"promo_homyak_{name}"
            )])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–º—è–∫–æ–≤:", reply_markup=keyboard)
        await state.set_state(PromoCreation.waiting_for_homyak_selection)

    elif reward_type == 4:
        attempts = await state.get_data()
        failed_attempts = attempts.get("failed_attempts", 0)

        try:
            bonus_points = int(message.text.strip())
            if bonus_points <= 0:
                raise ValueError
        except ValueError:
            failed_attempts += 1
            await state.update_data(failed_attempts=failed_attempts)

            if failed_attempts >= 3:
                await state.clear()
                await message.answer("‚ùå –¢—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
                return

            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        await state.update_data(reward_value=str(bonus_points))
        await message.answer("‚è≥ –ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã–¥–∞–≤–∞—Ç—å (–≤ —á–∞—Å–∞—Ö)?")
        await state.set_state(PromoCreation.waiting_for_duration)


@router.callback_query(F.data.startswith("promo_homyak_"))
async def select_homyak(callback_query: CallbackQuery, state: FSMContext):
    match = re.match(r"promo_homyak_(.+)", callback_query.data)
    if match:
        homyak_name = match.group(1)
        await state.update_data(reward_value=homyak_name)
        print(f"–í—ã–±—Ä–∞–Ω —Ö–æ–º—è–∫: {homyak_name}")
        await callback_query.message.answer("üî¢ –°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –º–∞–∫—Å–∏–º—É–º?")
        await state.set_state(PromoCreation.waiting_for_max_uses)
    else:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ö–æ–º—è–∫–∞.")
    await callback_query.answer()

@router.message(PromoCreation.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    attempts = await state.get_data()
    failed_attempts = attempts.get("failed_attempts", 0)

    try:
        hours = int(message.text.strip())
        if hours <= 0:
            raise ValueError
    except ValueError:
        failed_attempts += 1
        await state.update_data(failed_attempts=failed_attempts)

        if failed_attempts >= 3:
            await state.clear()
            await message.answer("‚ùå –¢—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            return

        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
        return

    await state.update_data(duration=hours * 60)
    await message.answer("üî¢ –°–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –º–∞–∫—Å–∏–º—É–º?")
    await state.set_state(PromoCreation.waiting_for_max_uses)

@router.message(PromoCreation.waiting_for_max_uses)
async def process_max_uses(message: Message, state: FSMContext):
    attempts = await state.get_data()
    failed_attempts = attempts.get("failed_attempts", 0)

    try:
        max_uses = int(message.text.strip())
        if max_uses <= 0:
            raise ValueError
    except ValueError:
        failed_attempts += 1
        await state.update_data(failed_attempts=failed_attempts)

        if failed_attempts >= 3:
            await state.clear()
            await message.answer("‚ùå –¢—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            return

        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    reward_type = data["reward_type"]
    reward_value = data.get("reward_value", "")
    duration = data.get("duration", 0)

    from ..database.promo import create_promo
    await create_promo(
        code=data["promo_code"],
        creator_id=message.from_user.id,
        reward_type=reward_type,
        reward_value=reward_value,
        duration=duration,
        max_uses=max_uses
    )

    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ ¬´{data['promo_code']}¬ª —Å–æ–∑–¥–∞–Ω!")
    await state.clear()