# bot/admin/commands.py
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command
import re
from datetime import datetime, timedelta
from ..database.premium import remove_premium
from ..database.admins import is_admin, is_owner, add_admin, remove_admin
from ..database.cooldowns import get_last_used, set_last_used, set_infinite_mode
from ..database.premium import get_premium, set_premium
from ..database.rarity import get_rarity_stats
from ..config import HOMYAK_FILES_DIR
import aiosqlite
from ..config import COOLDOWN_DB_PATH, SETTINGS, HOMYAK_FILES_DIR

router = Router()

GLOBAL_COOLDOWN_MINUTES = 1440

def parse_user_id(text: str) -> int | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ —Å—Ç—Ä–æ–∫–∏: –ª–∏–±–æ —á–∏—Å–ª–æ, –ª–∏–±–æ @username"""
    text = text.strip()
    if text.isdigit():
        return int(text)
    if text.startswith('@'):
        return None
    return None

@router.message(Command("makeadmin"))
async def cmd_makeadmin(message: Message):
    if not await is_owner(message.from_user.id):
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /makeadmin [user_id]")
        return

    user_id = parse_user_id(args[1])
    if user_id is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ ID.")
        return

    await add_admin(user_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!")

@router.message(Command("refund"))
async def cmd_refund(message: Message):
    if message.from_user.id != 7869783590:
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /refund [ID –æ–ø–µ—Ä–∞—Ü–∏–∏]")
        return

    tx_id = args[1].strip()

    try:
        result = await message.bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=tx_id
        )
        if result:
            await message.answer(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–µ–Ω –¥–ª—è ID: `{tx_id}`", parse_mode="HTML")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è ID: `{tx_id}`", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: `{e}`", parse_mode="HTML")

@router.message(Command("panel"))
async def cmd_panel(message: Message):
    if not await is_admin(message.from_user.id):
        return

    text = (
        "üõ°Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "‚Ä¢ /makeadmin [id] ‚Äî –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π)\n"
        "‚Ä¢ /unadmin [id] ‚Äî —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É\n"
        "‚Ä¢ /rkd [id] ‚Äî —É–±—Ä–∞—Ç—å –ö–î\n"
        "‚Ä¢ /gtime [id] ‚Äî –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è\n"
        "‚Ä¢ /ttime [id] ‚Äî —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ö–î\n"
        "‚Ä¢ /gkd [–º–∏–Ω] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ö–î\n"
        "‚Ä¢ /gad ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º (–¥–ª—è —Å–µ–±—è)\n"
    )
    await message.answer(text, parse_mode="HTML")

@router.message(Command("unadmin"))
async def cmd_unadmin(message: Message):
    if not await is_admin(message.from_user.id):
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unadmin [user_id]")
        return

    user_id = parse_user_id(args[1])
    if user_id is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        return

    success = await remove_admin(user_id, message.from_user.id)
    if success:
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∫–∞ —É {user_id} —Å–Ω—è—Ç–∞.")

@router.message(Command("rkd"))
async def cmd_rkd(message: Message):
    if not await is_admin(message.from_user.id):
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rkd [id]")
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
        return

    from ..database.cooldowns import reset_cooldown
    await reset_cooldown(user_id)

    await message.answer(f"‚úÖ –ö–î —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {user_id}")

@router.message(Command("gtime"))
async def cmd_gtime(message: Message):
    if not await is_admin(message.from_user.id):
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gtime [user_id]")
        return

    user_id = parse_user_id(args[1])
    if user_id is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        return

    last_used = await get_last_used(user_id)
    if last_used:
        await message.answer(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {last_used.strftime('%Y-%m-%d %H:%M:%S')}")
    else:
        await message.answer("üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª —Ö–æ–º—è–∫–∞.")

@router.message(Command("ttime"))
async def cmd_ttime(message: Message):
    if not await is_admin(message.from_user.id):
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ttime [user_id]")
        return

    user_id = parse_user_id(args[1])
    if user_id is None:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        return

    last_used = await get_last_used(user_id)
    if not last_used:
        await message.answer("üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª —Ö–æ–º—è–∫–∞.")
        return

    cooldown_end = last_used + timedelta(minutes=GLOBAL_COOLDOWN_MINUTES)
    now = datetime.now()
    if now >= cooldown_end:
        await message.answer("‚úÖ –ö–î —É–∂–µ –ø—Ä–æ—à—ë–ª!")
    else:
        remaining = cooldown_end - now
        hours, remainder = divmod(remaining.seconds, 3600)
        minutes = remainder // 60
        await message.answer(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º–∏–Ω")

router.message(Command("gkd"))
async def cmd_gkd(message: Message):
    if not await is_owner(message.from_user.id):
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("test")
        return

    try:
        value = int(args[1])
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    if value == 0:
        from ..database.cooldowns import reset_all_cooldowns
        await reset_all_cooldowns()
        SETTINGS["GLOBAL_COOLDOWN_MINUTES"] = 0
        await message.answer("on")
    elif value == 1:
        SETTINGS["GLOBAL_COOLDOWN_MINUTES"] = 1440
        await message.answer("24")
    else:
        if value < 0:
            await message.answer("nowork")
            return
        SETTINGS["GLOBAL_COOLDOWN_MINUTES"] = value
        await message.answer(f"{value}")

@router.message(Command("gad"))
async def cmd_gad(message: Message):
    if not await is_admin(message.from_user.id):
        return

    await set_infinite_mode(message.from_user.id, True)
    await message.answer("‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º (–ö–î —Å–Ω—è—Ç).")

@router.message(Command("ungad"))
async def cmd_ungad(message: Message):
    if not await is_admin(message.from_user.id):
        return

    from ..database.cooldowns import set_infinite_mode
    await set_infinite_mode(message.from_user.id, False)
    await message.answer("‚úÖ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á—ë–Ω. –ö–î —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω.")

@router.message(Command("givepremium"))
async def cmd_admin_premium(message: Message):
    if not await is_admin(message.from_user.id):
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/givepremium [user_id/@username] [–º–µ—Å—è—Ü—ã/lifetime/–ª—Ç/lt]"
        )
        return

    target = args[1]
    period = args[2].lower()

    user_id = None
    if target.startswith('@'):
        await message.answer("–ø–æ –∞–π–¥–∏ –ø–æ–∫–∞ –Ω–µ")
        return
    else:
        try:
            user_id = int(target)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
            return

    is_lifetime = False
    days = 0

    if period in ["lifetime", "–ª–∞–π—Ñ—Ç–∞–π–º", "–ª—Ç", "lt"]:
        is_lifetime = True
    else:
        try:
            months = int(period)
            days = months * 30
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 'lifetime/–ª—Ç/lt'.")
            return


    await set_premium(user_id, days=days, is_lifetime=is_lifetime)
    
    try:
        user = await message.bot.get_chat(user_id)
        full_name = f"{user.first_name or ''} {user.last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = f"@{user.username}" if user.username else "–Ω–µ—Ç"
    except:
        full_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        username = "–Ω–µ—Ç"

    if is_lifetime:
        await message.answer(f"‚úÖ Premium (–Ω–∞–≤—Å–µ–≥–¥–∞) –≤—ã–¥–∞–Ω:\n{full_name} ({username}) | ID: {user_id}")
    else:
        await message.answer(f"‚úÖ Premium –Ω–∞ {days//30} –º–µ—Å. –≤—ã–¥–∞–Ω:\n{full_name} ({username}) | ID: {user_id}")

@router.message(Command("unpremium"))
async def cmd_unpremium(message: Message):
    if not await is_admin(message.from_user.id):
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unpremium [user_id/@username]")
        return

    target = args[1]
    if target.startswith('@'):
        await message.answer("–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ç–µ–≥—É")
        return

    try:
        user_id = int(target)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        return

    premium_info = await get_premium(user_id)
    if not premium_info:
        await message.answer("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Premium.")
        return

    try:
        user = await message.bot.get_chat(user_id)
        full_name = f"{user.first_name or ''} {user.last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = f"@{user.username}" if user.username else "–Ω–µ—Ç"
    except:
        full_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        username = "–Ω–µ—Ç"

    if premium_info["is_lifetime"]:
        status_text = "Premium (–Ω–∞–≤—Å–µ–≥–¥–∞)"
    elif premium_info["expires_at"]:
        from datetime import datetime
        expires_date = datetime.fromisoformat(premium_info["expires_at"]).strftime("%d.%m.%Y")
        status_text = f"Premium –¥–æ {expires_date}"
    else:
        status_text = "–≤—Ä–µ–º–µ–Ω–Ω—ã–π Premium"

    from ..database.premium import init_db
    db_path = str(init_db.__globals__["PREMIUM_DB_PATH"])
    async with __import__("aiosqlite").connect(db_path) as db:
        await db.execute("DELETE FROM premium WHERE user_id = ?", (user_id,))
        await db.commit()

    await message.answer(
        f"‚úÖ Premium —Å–Ω—è—Ç:\n"
        f"{full_name} ({username}) | ID: {user_id}\n"
        f"–ë—ã–ª: {status_text}"
    )
    await remove_premium(user_id)

@router.message(Command("hstats"))
async def cmd_hstats(message: Message):
    if not await is_admin(message.from_user.id):
        return

    all_cards = [
        f for f in HOMYAK_FILES_DIR.glob("*.png")
        if f.name.lower() != "welcome.mp4"
    ]
    total = len(all_cards)

    if total == 0:
        await message.answer("üì≠ –ù–µ—Ç —Ö–æ–º—è–∫–æ–≤ –≤ –±–∞–∑–µ.")
        return

    stats = await get_rarity_stats()

    rarity_names = {
        1: "–û–±—ã—á–Ω–∞—è",
        2: "–†–µ–¥–∫–∞—è",
        3: "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è",
        4: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"
    }

    stats_text = "\n".join(
        f"‚Ä¢ {rarity_names[rarity]}: {count}"
        for rarity, count in sorted(stats.items())
    )

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–æ–º—è–∫–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total}\n"
        f"{stats_text}",
        parse_mode="HTML"
    )