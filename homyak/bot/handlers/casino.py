from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from time import time
import asyncio
from ..admin_logs.logger import casino_log
from ..config import ADMIN_CHAT_ID
from typing import Dict, Tuple, Union, Optional
import random

from bot.database.money import get_money, add_money

last_button_press = {}
COOLDOWN_SECONDS = 10

router = Router()


class CasinoStates(StatesGroup):
    waiting_bet_dice = State()
    waiting_choice_dice = State()
    waiting_bet_basket = State()
    waiting_choice_basket = State()
    waiting_bet_football = State()
    waiting_choice_football = State()
    waiting_bet_attempts = State()
    waiting_bet_rps = State()
    waiting_choice_rps = State()
    waiting_bet_slots = State()
    waiting_bet_darts = State()
    waiting_choice_darts = State()
    waiting_bet_mines = State()
    waiting_bombs_mines = State()
    playing_mines = State()


# (chat_id, message_id) -> owner_id
MESSAGE_OWNERS: Dict[Tuple[int, int], int] = {}

MINES_MULTIPLIERS = {
    2: [1.02, 1.11, 1.22, 1.34, 1.48, 1.64, 1.84, 2.07, 2.35, 2.68, 3.09, 3.61, 4.27, 5.12, 6.26, 7.83, 10.07, 13.42, 18.80, 28.20, 47.00, 94.00, 282.00],
    3: [1.06, 1.22, 1.40, 1.62, 1.89, 2.23, 2.64, 3.17, 3.86, 4.75, 5.93, 7.55, 9.82, 13.10, 18.01, 25.73, 38.60, 61.77, 108.10, 216.20, 540.50, 2162.00],
    5: [1.17, 1.48, 1.89, 2.45, 3.22, 4.29, 5.82, 8.07, 11.43, 16.63, 24.94, 38.80, 63.05, 108.09, 198.18, 396.36, 891.82, 2378.19, 8323.69, 49942.20],
    7: [1.30, 1.84, 2.64, 3.88, 5.82, 8.96, 14.19, 23.23, 39.49, 70.21, 131.66, 263.32, 570.52, 1369.26, 3765.48, 12551.61, 56482.25, 451858.00]
}


def get_multiplier(bet_amount: int) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–≤–∫–∏."""
    return 1.75 if bet_amount > 50 else 2.0


def remember_owner(msg: Message, owner_id: int):
    """
    –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∫ —Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.
    """
    MESSAGE_OWNERS[(msg.chat.id, msg.message_id)] = owner_id


def is_on_cooldown(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ."""
    now = time()
    last = last_button_press.get(user_id, 0)
    if now - last < COOLDOWN_SECONDS:
        return True
    last_button_press[user_id] = now
    return False


async def get_balance_text(user_id: int) -> str:
    balance = await get_money(user_id)
    return f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b> –º–æ–Ω–µ—Ç"


async def only_owner(event: Union[CallbackQuery, Message], state: Optional[FSMContext] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞.

    1) –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery:
       - –°–º–æ—Ç—Ä–∏–º, –∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ö–û–ù–ö–†–ï–¢–ù–û –≠–¢–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
       - –ï—Å–ª–∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü ‚Üí show_alert + –∑–∞–ø—Ä–µ—Ç.

    2) –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ Message (—é–∑–µ—Ä —à–ª—ë—Ç —Å—Ç–∞–≤–∫—É):
       - –ï—Å–ª–∏ state –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º owner_id –≤ FSM –ø—Ä–æ—Ç–∏–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
         –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.
    """
    if isinstance(event, CallbackQuery):
        chat_id = event.message.chat.id
        msg_id = event.message.message_id
        user_id = event.from_user.id

        owner_id = MESSAGE_OWNERS.get((chat_id, msg_id))

        if owner_id is None:
            await event.answer("‚ùå –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã.", show_alert=True)
            return False

        if owner_id != user_id:
            await event.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
            return False

        return True

    # –∏–Ω–∞—á–µ —ç—Ç–æ Message
    if state is not None:
        data = await state.get_data()
        owner_id = data.get("owner_id")
        if owner_id is not None and owner_id != event.from_user.id:
            await event.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏!")
            return False

    return True


async def reset_state_keep_owner(state: FSMContext, owner_id: int):
    await state.set_state(None)
    await state.set_data({"owner_id": owner_id})


# === –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ===

@router.message(Command("casino"))
async def cmd_casino(message: Message, state: FSMContext):
    if message.chat.type == "private":
        return await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∏—Å—Ç–µ–º–∞ –∫–∞–∑–∏–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")

    owner_id = message.from_user.id
    await state.update_data(owner_id=owner_id)

    balance_text = await get_balance_text(owner_id)
    user = message.from_user
    raw_name = user.full_name or user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ö—É–±–∏–∫", callback_data="casino_dice"),
         InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="casino_basketball")],
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="casino_football"),
         InlineKeyboardButton(text="‚úä –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞", callback_data="casino_rps")],
        [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="casino_slots"),
         InlineKeyboardButton(text="üéØ –î–∞—Ä—Ç—Å", callback_data="casino_darts")],
        [InlineKeyboardButton(text="üí£ –ú–∏–Ω—ã", callback_data="casino_mines")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="casino_close")]
    ])

    sent = await message.answer(
        f"üé∞ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, {raw_name}! –≤ Casino-–•–æ–º—è–∫!\n\n"
        f"ü§î –í–∞—Å –±—É–¥—É—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–Ω–∞–∫–æ–º—ã–µ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã: –∫—É–±–∏–∫, –±–∞—Å–∫–µ—Ç, —Ñ—É—Ç–±–æ–ª –∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä—ã!\n"
        f"üí∏ –ó–∞ –≤—ã–∏–≥—Ä—ã—à –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ö2 —Å—Ç–∞–≤–∫—É\n\n"
        f"ü™ô –ò–≥—Ä—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤–∞–ª—é—Ç–µ \"–ú–æ–Ω–µ—Ç—ã\"\n\n{balance_text}",
        reply_markup=kb,
        parse_mode="HTML"
    )
    remember_owner(sent, owner_id)


@router.callback_query(F.data == "casino_close")
async def casino_close(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return
    await callback.message.delete()
    await callback.answer()


# === –ö–£–ë–ò–ö ===

@router.callback_query(F.data == "casino_dice")
async def casino_dice_menu(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return
    if is_on_cooldown(callback.from_user.id):
        await callback.answer()
        return

    balance_text = await get_balance_text(callback.from_user.id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])

    sent = await callback.message.answer(
        f"üé≤ <b>–ö—É–±–∏–∫</b>\n\n{balance_text}\n"
        f"üí∏ –ï—Å–ª–∏ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤—ã—à–µ 50 –º–æ–Ω–µ—Ç - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.75—Ö, –µ—Å–ª–∏ –Ω–∏–∂–µ 50 –º–æ–Ω–µ—Ç —Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2—Ö\n"
        f"<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    remember_owner(sent, callback.from_user.id)

    await state.set_state(CasinoStates.waiting_bet_dice)
    await callback.answer()


@router.message(CasinoStates.waiting_bet_dice)
async def process_dice_bet(message: Message, state: FSMContext):
    if not await only_owner(message, state):
        return

    user_id = message.from_user.id
    balance = await get_money(user_id)
    data = await state.get_data()
    attempts = data.get("attempts", 0)

    try:
        bet_amount = int(message.text)
        if bet_amount < 1:
            return await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞!", parse_mode="HTML")
        if bet_amount > 70:
            return await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 70 –º–æ–Ω–µ—Ç!", parse_mode="HTML")
        if bet_amount > balance:
            return await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>", parse_mode="HTML")

        await state.update_data(bet_amount=bet_amount)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ß—ë—Ç", callback_data="dice_even"),
             InlineKeyboardButton(text="–ù–µ—á—ë—Ç", callback_data="dice_odd")],
            [InlineKeyboardButton(text="–ë–æ–ª—å—à–µ", callback_data="dice_high"),
             InlineKeyboardButton(text="–ú–µ–Ω—å—à–µ", callback_data="dice_low")],
            [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
        ])

        sent = await message.answer("üé≤ <b>–í—ã–±–µ—Ä–∏—Ç–µ: –ß—ë—Ç –∏–ª–∏ –ù–µ—á—ë—Ç?</b>", reply_markup=kb, parse_mode="HTML")
        remember_owner(sent, message.from_user.id)

        await state.set_state(CasinoStates.waiting_choice_dice)

    except ValueError:
        attempts += 1
        if attempts >= 3:
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /casino", parse_mode="HTML")
            data = await state.get_data()
            owner_id = data.get("owner_id")
            if owner_id:
                await reset_state_keep_owner(state, owner_id)
            else:
                await state.clear()
        else:
            await state.update_data(attempts=attempts)
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", parse_mode="HTML")


@router.callback_query(F.data.in_({"dice_high", "dice_low"}))
async def process_dice_high_low(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    user_id = callback.from_user.id
    data = await state.get_data()
    bet_amount = data.get("bet_amount")

    if bet_amount is None:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    balance_before = await get_money(user_id)
    await add_money(user_id, -bet_amount)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])
    await callback.message.edit_reply_markup(reply_markup=kb)

    dice_msg = await callback.message.answer_dice(emoji="üé≤")
    await asyncio.sleep(4)
    dice_value = dice_msg.dice.value

    is_high = callback.data == "dice_high"
    is_win = (dice_value > 3) if is_high else (dice_value <= 3)
    user_choice = "–ë–æ–ª—å—à–µ" if is_high else "–ú–µ–Ω—å—à–µ"
    outcome_text = "–±–æ–ª—å—à–µ" if dice_value > 3 else "–º–µ–Ω—å—à–µ"

    if is_win:
        multiplier = get_multiplier(bet_amount)
        win_amount = int(bet_amount * multiplier)
        await add_money(user_id, win_amount)
        result_text = (
            f"üé≤ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [+{win_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount + win_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [{outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ö—É–±–∏–∫", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )
    else:
        result_text = (
            f"üé≤ <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [-{bet_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [{outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ö—É–±–∏–∫", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )

    await callback.message.delete()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ï—â—ë —Ä–∞–∑", callback_data="casino_dice"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
    ])
    sent = await callback.message.answer(result_text, reply_markup=kb, parse_mode="HTML")
    remember_owner(sent, user_id)

    owner_id = data.get("owner_id")
    if owner_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
        await state.clear()
        return
    await reset_state_keep_owner(state, owner_id)

    await callback.answer()


@router.callback_query(F.data.in_({"dice_even", "dice_odd"}))
async def process_dice_choice(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    user_id = callback.from_user.id
    data = await state.get_data()
    bet_amount = data.get("bet_amount")

    if bet_amount is None:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    balance_before = await get_money(user_id)
    await add_money(user_id, -bet_amount)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])
    await callback.message.edit_reply_markup(reply_markup=kb)

    dice_msg = await callback.message.answer_dice(emoji="üé≤")
    await asyncio.sleep(4)
    dice_value = dice_msg.dice.value

    is_even = callback.data == "dice_even"
    is_win = (dice_value % 2 == 0) if is_even else (dice_value % 2 != 0)
    user_choice = "–ß—ë—Ç" if is_even else "–ù–µ—á—ë—Ç"
    outcome_text = "—á—ë—Ç" if dice_value % 2 == 0 else "–Ω–µ—á—ë—Ç"

    if is_win:
        multiplier = get_multiplier(bet_amount)
        win_amount = int(bet_amount * multiplier)
        await add_money(user_id, win_amount)
        result_text = (
            f"üé≤ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [+{win_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount + win_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [–ò—Ç–æ–≥: {outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ö—É–±–∏–∫", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )
    else:
        result_text = (
            f"üé≤ <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [-{bet_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [–ò—Ç–æ–≥: {outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ö—É–±–∏–∫", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )

    await callback.message.delete()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ï—â—ë —Ä–∞–∑", callback_data="casino_dice"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
    ])
    sent = await callback.message.answer(result_text, reply_markup=kb, parse_mode="HTML")
    remember_owner(sent, user_id)

    owner_id = data.get("owner_id")
    if owner_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
        await state.clear()
        return
    await reset_state_keep_owner(state, owner_id)

    await callback.answer()


# === –ë–ê–°–ö–ï–¢–ë–û–õ ===

@router.callback_query(F.data == "casino_basketball")
async def casino_basketball_menu(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return
    if is_on_cooldown(callback.from_user.id):
        await callback.answer()
        return

    balance_text = await get_balance_text(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])

    sent = await callback.message.answer(
        f"üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b>\n\n{balance_text}\n"
        f"üí∏ –ï—Å–ª–∏ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤—ã—à–µ 50 –º–æ–Ω–µ—Ç - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.75—Ö, –µ—Å–ª–∏ –Ω–∏–∂–µ 50 –º–æ–Ω–µ—Ç —Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2—Ö\n"
        f"<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    remember_owner(sent, callback.from_user.id)

    await state.set_state(CasinoStates.waiting_bet_basket)
    await callback.answer()


@router.message(CasinoStates.waiting_bet_basket)
async def process_basket_bet(message: Message, state: FSMContext):
    if not await only_owner(message, state):
        return

    user_id = message.from_user.id
    balance = await get_money(user_id)
    data = await state.get_data()
    attempts = data.get("attempts", 0)

    try:
        bet_amount = int(message.text)
        if bet_amount < 1:
            return await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞!", parse_mode="HTML")
        if bet_amount > 70:
            return await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 70 –º–æ–Ω–µ—Ç!", parse_mode="HTML")
        if bet_amount > balance:
            return await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>", parse_mode="HTML")

        await state.update_data(bet_amount=bet_amount)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–∞–¥–µ—Ç", callback_data="basket_hit"),
             InlineKeyboardButton(text="–ù–µ –ø–æ–ø–∞–¥–µ—Ç", callback_data="basket_miss")],
            [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
        ])

        sent = await message.answer("üèÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ: –ü–æ–ø–∞–¥–µ—Ç –∏–ª–∏ –ù–µ –ø–æ–ø–∞–¥–µ—Ç?</b>", reply_markup=kb, parse_mode="HTML")
        remember_owner(sent, message.from_user.id)

        await state.set_state(CasinoStates.waiting_choice_basket)

    except ValueError:
        attempts += 1
        if attempts >= 3:
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /casino", parse_mode="HTML")
            data = await state.get_data()
            owner_id = data.get("owner_id")
            if owner_id:
                await reset_state_keep_owner(state, owner_id)
            else:
                await state.clear()
        else:
            await state.update_data(attempts=attempts)
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", parse_mode="HTML")


@router.callback_query(F.data.in_({"basket_hit", "basket_miss"}))
async def process_basket_choice(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    user_id = callback.from_user.id
    data = await state.get_data()
    bet_amount = data.get("bet_amount")

    if bet_amount is None:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    balance_before = await get_money(user_id)
    await add_money(user_id, -bet_amount)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])
    await callback.message.edit_reply_markup(reply_markup=kb)

    dice_msg = await callback.message.answer_dice(emoji="üèÄ")
    await asyncio.sleep(4)
    dice_value = dice_msg.dice.value

    is_hit = callback.data == "basket_hit"
    hit = dice_value in (4, 5)
    user_choice = "–ü–æ–ø–∞–¥–µ—Ç" if is_hit else "–ù–µ –ø–æ–ø–∞–¥–µ—Ç"
    outcome_text = "–ø–æ–ø–∞–ª–æ" if hit else "–Ω–µ –ø–æ–ø–∞–ª–æ"

    if hit == is_hit:
        multiplier = get_multiplier(bet_amount)
        win_amount = int(bet_amount * multiplier)
        await add_money(user_id, win_amount)
        result_text = (
            f"üèÄ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [+{win_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount + win_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [{outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ë–∞—Å–∫–µ—Ç–±–æ–ª", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )
    else:
        result_text = (
            f"üèÄ <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [-{bet_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [{outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ë–∞—Å–∫–µ—Ç–±–æ–ª", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )

    await callback.message.delete()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÄ –ï—â—ë —Ä–∞–∑", callback_data="casino_basketball"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
    ])
    sent = await callback.message.answer(result_text, reply_markup=kb, parse_mode="HTML")
    remember_owner(sent, user_id)

    owner_id = data.get("owner_id")
    if owner_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
        await state.clear()
        return
    await reset_state_keep_owner(state, owner_id)

    await callback.answer()


# === –§–£–¢–ë–û–õ ===

@router.callback_query(F.data == "casino_football")
async def casino_football_menu(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return
    if is_on_cooldown(callback.from_user.id):
        await callback.answer()
        return

    balance_text = await get_balance_text(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])

    sent = await callback.message.answer(
        f"‚öΩ <b>–§—É—Ç–±–æ–ª</b>\n\n{balance_text}\n"
        f"üí∏ –ï—Å–ª–∏ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤—ã—à–µ 50 –º–æ–Ω–µ—Ç - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.75—Ö, –µ—Å–ª–∏ –Ω–∏–∂–µ 50 –º–æ–Ω–µ—Ç —Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2—Ö\n"
        f"<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    remember_owner(sent, callback.from_user.id)

    await state.set_state(CasinoStates.waiting_bet_football)
    await callback.answer()


@router.message(CasinoStates.waiting_bet_football)
async def process_football_bet(message: Message, state: FSMContext):
    if not await only_owner(message, state):
        return

    user_id = message.from_user.id
    balance = await get_money(user_id)
    data = await state.get_data()
    attempts = data.get("attempts", 0)

    try:
        bet_amount = int(message.text)
        if bet_amount < 1:
            return await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞!", parse_mode="HTML")
        if bet_amount > 70:
            return await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 70 –º–æ–Ω–µ—Ç!", parse_mode="HTML")
        if bet_amount > balance:
            return await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>", parse_mode="HTML")

        await state.update_data(bet_amount=bet_amount)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–±—å—ë—Ç", callback_data="foot_goal"),
             InlineKeyboardButton(text="–ü—Ä–æ–º–∞—Ö–Ω—ë—Ç—Å—è", callback_data="foot_miss")],
            [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
        ])

        sent = await message.answer("‚öΩ <b>–í—ã–±–µ—Ä–∏—Ç–µ: –ó–∞–±—å—ë—Ç –∏–ª–∏ –ü—Ä–æ–º–∞—Ö–Ω—ë—Ç—Å—è?</b>", reply_markup=kb, parse_mode="HTML")
        remember_owner(sent, message.from_user.id)

        await state.set_state(CasinoStates.waiting_choice_football)

    except ValueError:
        attempts += 1
        if attempts >= 3:
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /casino", parse_mode="HTML")
            data = await state.get_data()
            owner_id = data.get("owner_id")
            if owner_id:
                await reset_state_keep_owner(state, owner_id)
            else:
                await state.clear()
        else:
            await state.update_data(attempts=attempts)
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", parse_mode="HTML")


@router.callback_query(F.data.in_({"foot_goal", "foot_miss"}))
async def process_football_choice(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    user_id = callback.from_user.id
    data = await state.get_data()
    bet_amount = data.get("bet_amount")

    if bet_amount is None:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    balance_before = await get_money(user_id)
    await add_money(user_id, -bet_amount)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])
    await callback.message.edit_reply_markup(reply_markup=kb)

    dice_msg = await callback.message.answer_dice(emoji="‚öΩ")
    await asyncio.sleep(4)
    dice_value = dice_msg.dice.value

    is_goal = callback.data == "foot_goal"
    goal = dice_value >= 3
    user_choice = "–ó–∞–±—å—ë—Ç" if is_goal else "–ü—Ä–æ–º–∞—Ö–Ω—ë—Ç—Å—è"
    outcome_text = "–ó–∞–±–∏–ª" if goal else "–ü—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è"

    if goal == is_goal:
        multiplier = get_multiplier(bet_amount)
        win_amount = int(bet_amount * multiplier)
        await add_money(user_id, win_amount)
        result_text = (
            f"‚öΩ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [+{win_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount + win_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [{outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–§—É—Ç–±–æ–ª", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )
    else:
        result_text = (
            f"‚öΩ <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [-{bet_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [{outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–§—É—Ç–±–æ–ª", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )

    await callback.message.delete()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öΩ –ï—â—ë —Ä–∞–∑", callback_data="casino_football"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
    ])
    sent = await callback.message.answer(result_text, reply_markup=kb, parse_mode="HTML")
    remember_owner(sent, user_id)

    owner_id = data.get("owner_id")
    if owner_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
        await state.clear()
        return
    await reset_state_keep_owner(state, owner_id)

    await callback.answer()


# === –ö-–ù-–ë ===

@router.callback_query(F.data == "casino_rps")
async def casino_rps_menu(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return
    if is_on_cooldown(callback.from_user.id):
        await callback.answer()
        return

    balance_text = await get_balance_text(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])

    sent = await callback.message.answer(
        f"‚úä <b>–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞</b>\n\n{balance_text}\n"
        f"üí∏ –ï—Å–ª–∏ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤—ã—à–µ 50 –º–æ–Ω–µ—Ç - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.75—Ö, –µ—Å–ª–∏ –Ω–∏–∂–µ 50 –º–æ–Ω–µ—Ç —Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2—Ö\n"
        f"<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    remember_owner(sent, callback.from_user.id)

    await state.set_state(CasinoStates.waiting_bet_rps)
    await callback.answer()


@router.message(CasinoStates.waiting_bet_rps)
async def process_rps_bet(message: Message, state: FSMContext):
    if not await only_owner(message, state):
        return

    user_id = message.from_user.id
    balance = await get_money(user_id)
    data = await state.get_data()
    attempts = data.get("attempts", 0)

    try:
        bet_amount = int(message.text)
        if bet_amount < 1:
            return await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞!", parse_mode="HTML")
        if bet_amount > 70:
            return await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 70 –º–æ–Ω–µ—Ç!", parse_mode="HTML")
        if bet_amount > balance:
            return await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>", parse_mode="HTML")

        await state.update_data(bet_amount=bet_amount)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞–º–µ–Ω—å", callback_data="rps_rock"),
             InlineKeyboardButton(text="–ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_scissors"),
             InlineKeyboardButton(text="–ë—É–º–∞–≥–∞", callback_data="rps_paper")],
            [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
        ])

        sent = await message.answer("‚úä <b>–í—ã–±–µ—Ä–∏—Ç–µ: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞?</b>", reply_markup=kb, parse_mode="HTML")
        remember_owner(sent, message.from_user.id)

        await state.set_state(CasinoStates.waiting_choice_rps)

    except ValueError:
        attempts += 1
        if attempts >= 3:
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /casino", parse_mode="HTML")
            data = await state.get_data()
            owner_id = data.get("owner_id")
            if owner_id:
                await reset_state_keep_owner(state, owner_id)
            else:
                await state.clear()
        else:
            await state.update_data(attempts=attempts)
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", parse_mode="HTML")


@router.callback_query(F.data.in_({"rps_rock", "rps_scissors", "rps_paper"}))
async def process_rps_choice(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    user_id = callback.from_user.id
    data = await state.get_data()
    bet_amount = data.get("bet_amount")

    if bet_amount is None:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    balance_before = await get_money(user_id)
    await add_money(user_id, -bet_amount)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])
    await callback.message.edit_reply_markup(reply_markup=kb)

    choice_map = {
        "rps_rock": "–∫–∞–º–µ–Ω—å",
        "rps_scissors": "–Ω–æ–∂–Ω–∏—Ü—ã",
        "rps_paper": "–±—É–º–∞–≥–∞"
    }
    player_choice = choice_map[callback.data]

    bot_choice_num = random.randint(1, 3)
    bot_choices = {1: "–∫–∞–º–µ–Ω—å", 2: "–Ω–æ–∂–Ω–∏—Ü—ã", 3: "–±—É–º–∞–≥–∞"}
    bot_choice = bot_choices[bot_choice_num]

    emoji_map = {"–∫–∞–º–µ–Ω—å": "üëä", "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úåÔ∏è", "–±—É–º–∞–≥–∞": "‚úã"}
    player_emoji = emoji_map[player_choice]
    bot_emoji = emoji_map[bot_choice]

    wins = {"–∫–∞–º–µ–Ω—å": "–Ω–æ–∂–Ω–∏—Ü—ã", "–Ω–æ–∂–Ω–∏—Ü—ã": "–±—É–º–∞–≥–∞", "–±—É–º–∞–≥–∞": "–∫–∞–º–µ–Ω—å"}

    if wins[player_choice] == bot_choice:
        multiplier = get_multiplier(bet_amount)
        win_amount = int(bet_amount * multiplier)
        await add_money(user_id, win_amount)
        final_balance = balance_before - bet_amount + win_amount
        result_text = (
            f"‚úä <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"{player_emoji} vs {bot_emoji}[–ë–æ—Ç]\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [+{win_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{final_balance:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {player_choice}"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", player_choice, f"–ë–æ—Ç: {bot_choice}",
            balance_before=balance_before,
            from_chat_id=None,
            dice_message_id=None
        )
    elif player_choice == bot_choice:
        await add_money(user_id, bet_amount)  # –≤–æ–∑–≤—Ä–∞—Ç
        final_balance = balance_before
        result_text = (
            f"‚úä <b>–ù–∏—á—å—è!</b>\n"
            f"{player_emoji} vs {bot_emoji}[–ë–æ—Ç]\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{final_balance:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {player_choice}"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞", 0,
            "–Ω–∏—á—å—è", player_choice, f"–ë–æ—Ç: {bot_choice}",
            balance_before=balance_before,
            from_chat_id=None,
            dice_message_id=None
        )
    else:
        final_balance = balance_before - bet_amount
        result_text = (
            f"‚úä <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"{player_emoji} vs {bot_emoji}[–ë–æ—Ç]\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [-{bet_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{final_balance:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {player_choice}"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", player_choice, f"–ë–æ—Ç: {bot_choice}",
            balance_before=balance_before,
            from_chat_id=None,
            dice_message_id=None
        )

    await callback.message.delete()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úä –ï—â—ë —Ä–∞–∑", callback_data="casino_rps"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
    ])
    sent = await callback.message.answer(result_text, reply_markup=kb, parse_mode="HTML")
    remember_owner(sent, user_id)

    owner_id = data.get("owner_id")
    if owner_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
        await state.clear()
        return
    await reset_state_keep_owner(state, owner_id)

    await callback.answer()


# === –°–õ–û–¢–´ ===

@router.callback_query(F.data == "casino_slots")
async def casino_slots_menu(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return
    if is_on_cooldown(callback.from_user.id):
        await callback.answer()
        return

    balance_text = await get_balance_text(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])

    sent = await callback.message.answer(
        f"üé∞ <b>–°–ª–æ—Ç—ã</b>\n\n{balance_text}\n"
        f"üí∏ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x3\n"
        f"<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    remember_owner(sent, callback.from_user.id)

    await state.set_state(CasinoStates.waiting_bet_slots)
    await callback.answer()


@router.message(CasinoStates.waiting_bet_slots)
async def process_slots_bet(message: Message, state: FSMContext):
    if not await only_owner(message, state):
        return

    user_id = message.from_user.id
    balance = await get_money(user_id)
    data = await state.get_data()
    attempts = data.get("attempts", 0)

    try:
        bet_amount = int(message.text)
        if bet_amount < 1:
            return await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞!", parse_mode="HTML")
        if bet_amount > 70:
            return await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 70 –º–æ–Ω–µ—Ç!", parse_mode="HTML")
        if bet_amount > balance:
            return await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>", parse_mode="HTML")

        await state.update_data(bet_amount=bet_amount)
        await process_slots_spin_direct(message, state, bet_amount, user_id)

    except ValueError:
        attempts += 1
        if attempts >= 3:
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /casino", parse_mode="HTML")
            data = await state.get_data()
            owner_id = data.get("owner_id")
            if owner_id:
                await reset_state_keep_owner(state, owner_id)
            else:
                await state.clear()
        else:
            await state.update_data(attempts=attempts)
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", parse_mode="HTML")


async def process_slots_spin_direct(message: Message, state: FSMContext, bet_amount: int, owner_id: int):
    balance_before = await get_money(owner_id)
    await add_money(owner_id, -bet_amount)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])
    await message.edit_reply_markup(reply_markup=kb)

    dice_msg = await message.answer_dice(emoji="üé∞")
    await asyncio.sleep(4)
    dice_value = dice_msg.dice.value

    triple_same = {1, 43, 22, 52, 27, 38}
    jackpot_777 = 64

    if dice_value == jackpot_777:
        win_amount = bet_amount * 3
        await add_money(owner_id, win_amount)
        result_text = (
            f"üé∞ <b>–î–ñ–ï–ö–ü–û–¢! 777!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [+{win_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount + win_amount:,} –º–æ–Ω–µ—Ç</b>"
        )
        await casino_log(
            message.bot, message.from_user, bet_amount, "–°–ª–æ—Ç—ã", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", "777", f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=message.chat.id,
            dice_message_id=dice_msg.message_id
        )
    elif dice_value in triple_same:
        multiplier = get_multiplier(bet_amount)
        win_amount = int(bet_amount * multiplier)
        await add_money(owner_id, win_amount)
        combo_name = "BAR" if dice_value == 1 else "—Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö"
        result_text = (
            f"üé∞ <b>{combo_name.capitalize()}!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [+{win_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount + win_amount:,} –º–æ–Ω–µ—Ç</b>"
        )
        await casino_log(
            message.bot, message.from_user, bet_amount, "–°–ª–æ—Ç—ã", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", combo_name, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=message.chat.id,
            dice_message_id=dice_msg.message_id
        )
    else:
        result_text = (
            f"üé∞ <b>–ù–µ—É–¥–∞—á–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è.</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [-{bet_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount:,} –º–æ–Ω–µ—Ç</b>"
        )
        await casino_log(
            message.bot, message.from_user, bet_amount, "–°–ª–æ—Ç—ã", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", "–æ–±—ã—á–Ω–∞—è", f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=message.chat.id,
            dice_message_id=dice_msg.message_id
        )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ï—â—ë —Ä–∞–∑", callback_data="casino_slots"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
    ])
    sent = await message.answer(result_text, reply_markup=kb, parse_mode="HTML")
    remember_owner(sent, owner_id)

    data = await state.get_data()
    owner_state_id = data.get("owner_id", message.from_user.id)
    await reset_state_keep_owner(state, owner_state_id)


# === –î–ê–†–¢–° ===

@router.callback_query(F.data == "casino_darts")
async def casino_darts_menu(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return
    if is_on_cooldown(callback.from_user.id):
        await callback.answer()
        return

    balance_text = await get_balance_text(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])

    sent = await callback.message.answer(
        f"üéØ <b>–î–∞—Ä—Ç—Å</b>\n\n{balance_text}\n"
        f"üí∏ –ï—Å–ª–∏ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –≤—ã—à–µ 50 –º–æ–Ω–µ—Ç - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.75—Ö, –µ—Å–ª–∏ –Ω–∏–∂–µ 50 –º–æ–Ω–µ—Ç —Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2—Ö\n"
        f"<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    remember_owner(sent, callback.from_user.id)

    await state.set_state(CasinoStates.waiting_bet_darts)
    await callback.answer()


@router.message(CasinoStates.waiting_bet_darts)
async def process_darts_bet(message: Message, state: FSMContext):
    if not await only_owner(message, state):
        return

    user_id = message.from_user.id
    balance = await get_money(user_id)
    data = await state.get_data()
    attempts = data.get("attempts", 0)

    try:
        bet_amount = int(message.text)
        if bet_amount < 1:
            return await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞!", parse_mode="HTML")
        if bet_amount > 70:
            return await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 70 –º–æ–Ω–µ—Ç!", parse_mode="HTML")
        if bet_amount > balance:
            return await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>", parse_mode="HTML")

        await state.update_data(bet_amount=bet_amount)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–º–∞—Ö", callback_data="darts_miss"),
             InlineKeyboardButton(text="–ë–µ–ª–æ–µ", callback_data="darts_white"),
             InlineKeyboardButton(text="–ö—Ä–∞—Å–Ω–æ–µ", callback_data="darts_red")],
            [InlineKeyboardButton(text="–Ø–±–ª–æ—á–∫–æ", callback_data="darts_bullseye")],
            [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
        ])

        sent = await message.answer("üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –ø–æ–ø–∞–¥–∞–Ω–∏—è:</b>", reply_markup=kb, parse_mode="HTML")
        remember_owner(sent, message.from_user.id)

        await state.set_state(CasinoStates.waiting_choice_darts)

    except ValueError:
        attempts += 1
        if attempts >= 3:
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /casino", parse_mode="HTML")
            data = await state.get_data()
            owner_id = data.get("owner_id")
            if owner_id:
                await reset_state_keep_owner(state, owner_id)
            else:
                await state.clear()
        else:
            await state.update_data(attempts=attempts)
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", parse_mode="HTML")


@router.callback_query(F.data.in_({"darts_miss", "darts_white", "darts_red", "darts_bullseye"}))
async def process_darts_choice(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    user_id = callback.from_user.id
    data = await state.get_data()
    bet_amount = data.get("bet_amount")

    if bet_amount is None:
        await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    balance_before = await get_money(user_id)
    await add_money(user_id, -bet_amount)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])
    await callback.message.edit_reply_markup(reply_markup=kb)

    dice_msg = await callback.message.answer_dice(emoji="üéØ")
    await asyncio.sleep(4)
    dice_value = dice_msg.dice.value

    choice_map = {
        "darts_miss": ("–ü—Ä–æ–º–∞—Ö", [1]),
        "darts_white": ("–ë–µ–ª–æ–µ", [3, 5]),
        "darts_red": ("–ö—Ä–∞—Å–Ω–æ–µ", [2, 4]),
        "darts_bullseye": ("–Ø–±–ª–æ—á–∫–æ", [6])
    }
    user_choice, winning_values = choice_map[callback.data]

    if dice_value == 1:
        outcome_text = "–ø—Ä–æ–º–∞—Ö"
    elif dice_value in (3, 5):
        outcome_text = "–±–µ–ª–æ–µ"
    elif dice_value in (2, 4):
        outcome_text = "–∫—Ä–∞—Å–Ω–æ–µ"
    else:
        outcome_text = "—è–±–ª–æ—á–∫–æ"

    if dice_value in winning_values:
        multiplier = get_multiplier(bet_amount)
        win_amount = int(bet_amount * multiplier)
        await add_money(user_id, win_amount)
        result_text = (
            f"üéØ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [+{win_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount + win_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [{outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–î–∞—Ä—Ç—Å", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )
    else:
        result_text = (
            f"üéØ <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: <b>{bet_amount:,} [-{bet_amount:,}] –º–æ–Ω–µ—Ç</b>\n"
            f"–ë–∞–ª–∞–Ω—Å: <b>{balance_before - bet_amount:,} –º–æ–Ω–µ—Ç</b>\n"
            f"üó≥Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice} [{outcome_text}]"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–î–∞—Ä—Ç—Å", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", user_choice, f"–í—ã–ø–∞–ª–æ: {dice_value}",
            balance_before=balance_before,
            from_chat_id=callback.message.chat.id,
            dice_message_id=dice_msg.message_id
        )

    await callback.message.delete()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ï—â—ë —Ä–∞–∑", callback_data="casino_darts"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
    ])
    sent = await callback.message.answer(result_text, reply_markup=kb, parse_mode="HTML")
    remember_owner(sent, user_id)

    owner_id = data.get("owner_id")
    if owner_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
        await state.clear()
        return
    await reset_state_keep_owner(state, owner_id)

    await callback.answer()


# === –ú–ò–ù–´ ===

@router.callback_query(F.data == "casino_mines")
async def casino_mines_menu(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return
    if is_on_cooldown(callback.from_user.id):
        await callback.answer()
        return

    balance_text = await get_balance_text(callback.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])

    sent = await callback.message.answer(
        f"üí£ <b>–ú–∏–Ω—ã</b>\n\n{balance_text}\n"
        f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (3‚Äì20 –º–æ–Ω–µ—Ç)\n"
        f"<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:</b>",
        reply_markup=kb,
        parse_mode="HTML"
    )
    remember_owner(sent, callback.from_user.id)

    await state.set_state(CasinoStates.waiting_bet_mines)
    await callback.answer()


async def show_final_mines_field(
    bot: Bot,
    chat_id: int,
    mine_positions: list[tuple[int, int]],
    revealed: list[tuple[int, int]],
    message_thread_id: Optional[int] = None
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –º–∏–Ω –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ (–≤ –ª–æ–≥ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∞).
    """
    lost_cell = revealed[-1] if revealed and revealed[-1] in mine_positions else None
    buttons = []
    for r in range(5):
        row = []
        for c in range(5):
            pos = (r, c)
            if pos == lost_cell:
                text = "üí£‚ùå"
            elif pos in revealed:
                text = "üíé‚úÖ"
            elif pos in mine_positions:
                text = "üí£"
            else:
                text = "üü¶"
            row.append(InlineKeyboardButton(text=text, callback_data="noop"))
        buttons.append(row)

    await bot.send_message(
        chat_id,
        "<b>üí£ –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –º–∏–Ω:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML",
        message_thread_id=message_thread_id
    )


@router.message(CasinoStates.waiting_bet_mines)
async def process_mines_bet(message: Message, state: FSMContext):
    if not await only_owner(message, state):
        return

    user_id = message.from_user.id
    balance = await get_money(user_id)
    try:
        bet_amount = int(message.text)
        if bet_amount < 3:
            return await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 3 –º–æ–Ω–µ—Ç–∞!", parse_mode="HTML")
        if bet_amount > 20:
            return await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 20 –º–æ–Ω–µ—Ç!", parse_mode="HTML")
        if bet_amount > balance:
            return await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance:,}</b>", parse_mode="HTML")

        await state.update_data(bet_amount=bet_amount)

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="2", callback_data="mines_bombs:2"),
             InlineKeyboardButton(text="3", callback_data="mines_bombs:3")],
            [InlineKeyboardButton(text="5", callback_data="mines_bombs:5"),
             InlineKeyboardButton(text="7", callback_data="mines_bombs:7")],
            [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
        ])

        sent = await message.answer("üí£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±:</b>", reply_markup=kb, parse_mode="HTML")
        remember_owner(sent, message.from_user.id)

        await state.set_state(CasinoStates.waiting_bombs_mines)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", parse_mode="HTML")


@router.callback_query(F.data.startswith("mines_bombs:"), CasinoStates.waiting_bombs_mines)
async def process_mines_bombs(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    bombs = int(callback.data.split(":")[1])
    if bombs not in MINES_MULTIPLIERS:
        await callback.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±.", show_alert=True)
        return

    data = await state.get_data()
    bet_amount = data["bet_amount"]
    user_id = callback.from_user.id

    balance_before = await get_money(user_id)
    await add_money(user_id, -bet_amount)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="casino_back")]
    ])
    await callback.message.edit_reply_markup(reply_markup=kb)

    all_cells = [(r, c) for r in range(5) for c in range(5)]
    mine_positions = random.sample(all_cells, bombs)

    await state.update_data(
        bombs=bombs,
        mine_positions=mine_positions,
        revealed=[],
        balance_before=balance_before
    )

    await show_mines_field(callback.message, state)
    await state.set_state(CasinoStates.playing_mines)
    await callback.answer()


async def show_mines_field(message: Message, state: FSMContext):
    data = await state.get_data()
    bet_amount = data["bet_amount"]
    bombs = data["bombs"]
    revealed = data.get("revealed", [])
    opened = len(revealed)
    owner_id = data.get("owner_id", message.from_user.id)

    current_win = 0
    if opened > 0:
        multiplier = MINES_MULTIPLIERS[bombs][opened - 1]
        current_win = int(bet_amount * multiplier)

    buttons = []
    for r in range(5):
        row = []
        for c in range(5):
            if (r, c) in revealed:
                row.append(InlineKeyboardButton(text="üíé", callback_data=f"mines_open:{r}:{c}"))
            else:
                row.append(InlineKeyboardButton(text="üü¶", callback_data=f"mines_open:{r}:{c}"))
        buttons.append(row)

    cashout_text = f"üí∞ –ó–∞–±—Ä–∞—Ç—å: {current_win:,} –º–æ–Ω–µ—Ç" if current_win > 0 else "üí∞ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à"
    buttons.append([InlineKeyboardButton(text=cashout_text, callback_data="mines_cashout")])
    buttons.append([InlineKeyboardButton(text="‚ùì –ü—Ä–∞–≤–∏–ª–∞", url="https://telegra.ph/PRAVILA-IGRY-V-MINY---Homyak-Advent-10-30")])

    sent = await message.edit_text(
        f"üí£ <b>–ú–∏–Ω—ã</b>\n"
        f"–ë–æ–º–±: {bombs}\n"
        f"–û—Ç–∫—Ä—ã—Ç–æ: {opened}\n"
        f"–í—ã–∏–≥—Ä—ã—à: {current_win:,} –º–æ–Ω–µ—Ç",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )
    remember_owner(sent, owner_id)


@router.callback_query(F.data == "casino_mines", CasinoStates.playing_mines)
async def restart_mines_from_playing(callback: CallbackQuery, state: FSMContext):
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –ø—Ä—è–º–æ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
    await casino_mines_menu(callback, state)


@router.callback_query(F.data == "mines_cashout", CasinoStates.playing_mines)
async def mines_cashout(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    data = await state.get_data()
    user_id = callback.from_user.id
    bet_amount = data["bet_amount"]
    bombs = data["bombs"]
    revealed = data.get("revealed", [])
    balance_before = data["balance_before"]
    opened = len(revealed)

    if opened == 0:
        win_amount = 0
        result_text = "üí£ –í—ã –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏. –°—Ç–∞–≤–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞."
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ú–∏–Ω—ã", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", f"{bombs} –±–æ–º–±", "–ù–∏ –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ",
            balance_before=balance_before, from_chat_id=None, dice_message_id=None
        )

        await show_final_mines_field(
            bot=callback.bot,
            chat_id=ADMIN_CHAT_ID,
            mine_positions=data["mine_positions"],
            revealed=revealed,
            message_thread_id=5899
        )
    else:
        multiplier = MINES_MULTIPLIERS[bombs][opened - 1]
        win_amount = int(bet_amount * multiplier)
        await add_money(user_id, win_amount)
        result_text = (
            f"üí£ <b>–í—ã –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à!</b>\n"
            f"–°—Ç–∞–≤–∫–∞: {bet_amount:,} –º–æ–Ω–µ—Ç\n"
            f"–ë–æ–º–±: {bombs}\n"
            f"–û—Ç–∫—Ä—ã—Ç–æ –∫–ª–µ—Ç–æ–∫: {opened}\n"
            f"–í—ã–∏–≥—Ä—ã—à: <b>{win_amount:,} –º–æ–Ω–µ—Ç</b>"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ú–∏–Ω—ã", win_amount - bet_amount,
            "–≤—ã–∏–≥—Ä–∞–ª", f"{bombs} –±–æ–º–±", f"–û—Ç–∫—Ä—ã—Ç–æ: {opened} –∫–ª–µ—Ç–æ–∫",
            balance_before=balance_before, from_chat_id=None, dice_message_id=None
        )

        await show_final_mines_field(
            bot=callback.bot,
            chat_id=ADMIN_CHAT_ID,
            mine_positions=data["mine_positions"],
            revealed=revealed,
            message_thread_id=5899
        )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí£ –ï—â—ë —Ä–∞–∑", callback_data="casino_mines"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
    ])
    sent = await callback.message.edit_text(result_text, reply_markup=kb, parse_mode="HTML")
    remember_owner(sent, user_id)

    owner_id = data.get("owner_id")
    if owner_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
        await state.clear()
        return
    await reset_state_keep_owner(state, owner_id)

    await callback.answer()


@router.callback_query(F.data.startswith("mines_open:"), CasinoStates.playing_mines)
async def mines_open_cell(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    data = await state.get_data()
    user_id = callback.from_user.id

    r, c = map(int, callback.data.split(":")[1:3])
    pos = (r, c)

    if pos in data.get("revealed", []):
        await callback.answer("–£–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ!", show_alert=True)
        return

    mine_positions = data["mine_positions"]
    revealed = data.get("revealed", []) + [pos]
    await state.update_data(revealed=revealed)

    if pos in mine_positions:
        bet_amount = data["bet_amount"]
        balance_before = data["balance_before"]
        result_text = (
            f"üí£ –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ <b>–±–æ–º–±—É</b>!\n"
            f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount:,} –º–æ–Ω–µ—Ç!"
        )
        await casino_log(
            callback.bot, callback.from_user, bet_amount, "–ú–∏–Ω—ã", -bet_amount,
            "–ø—Ä–æ–∏–≥—Ä–∞–ª", f"{data['bombs']} –±–æ–º–±", f"–ë–æ–º–±–∞ –Ω–∞ {r+1},{c+1}",
            balance_before=balance_before, from_chat_id=None, dice_message_id=None
        )

        await show_final_mines_field(
            bot=callback.bot,
            chat_id=ADMIN_CHAT_ID,
            mine_positions=data["mine_positions"],
            revealed=revealed,
            message_thread_id=5899
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí£ –ï—â—ë —Ä–∞–∑", callback_data="casino_mines"),
             InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="casino_back")]
        ])
        sent = await callback.message.answer(result_text, reply_markup=kb, parse_mode="HTML")
        remember_owner(sent, user_id)

        owner_id = data.get("owner_id")
        if owner_id is None:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
            await state.clear()
            return
        await reset_state_keep_owner(state, owner_id)
    else:
        # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∑–∞–Ω–æ–≤–æ)
        await show_mines_field(callback.message, state)

    await callback.answer()


# === –ù–ê–ó–ê–î –í –ú–ï–ù–Æ ===

@router.callback_query(F.data == "casino_back")
async def casino_back(callback: CallbackQuery, state: FSMContext):
    if not await only_owner(callback, state):
        return

    data = await state.get_data()
    owner_id = data.get("owner_id")
    if owner_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /casino", show_alert=True)
        await state.clear()
        return
    await reset_state_keep_owner(state, owner_id)

    balance_text = await get_balance_text(callback.from_user.id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ö—É–±–∏–∫", callback_data="casino_dice"),
         InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="casino_basketball")],
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="casino_football"),
         InlineKeyboardButton(text="‚úä –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞", callback_data="casino_rps")],
        [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="casino_slots"),
         InlineKeyboardButton(text="üéØ –î–∞—Ä—Ç—Å", callback_data="casino_darts")],
        [InlineKeyboardButton(text="üí£ –ú–∏–Ω—ã", callback_data="casino_mines")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="casino_close")]
    ])

    sent = await callback.message.answer(
        f"üé∞ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ Casino-–•–æ–º—è–∫!\n\n"
        f"ü§î –í–∞—Å –±—É–¥—É—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–Ω–∞–∫–æ–º—ã–µ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã: –∫—É–±–∏–∫, –±–∞—Å–∫–µ—Ç, —Ñ—É—Ç–±–æ–ª –∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä—ã!\n"
        f"üí∏ –ó–∞ –≤—ã–∏–≥—Ä—ã—à –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ö2 —Å—Ç–∞–≤–∫—É\n\n"
        f"ü™ô –ò–≥—Ä—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤–∞–ª—é—Ç–µ \"–ú–æ–Ω–µ—Ç—ã\"\n\n{balance_text}",
        reply_markup=kb,
        parse_mode="HTML",
    )
    remember_owner(sent, callback.from_user.id)

    await callback.answer()
