from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from ..database.elixir import get_user_elixirs, consume_first_of_type
from ..database.cooldowns import get_remaining_time, reduce_cooldown
from .profile import cmd_profile
router = Router()

@router.message(Command("inventory"))
async def inventar_karoche_message(message: Message):
    if message.chat.type != "private":
        bot_link = "https://t.me/homyakadventbot?start=profile"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url=bot_link)]
        ])
        await message.answer(
            "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            reply_markup=keyboard,
            reply_to_message_id=message.message_id
        )
        return
    await cmd_profile(message)


@router.callback_query(F.data.startswith("inventory:"))
async def inventar_karoche_callback(query: CallbackQuery):
    await inventory_handler(query.message, query)

async def inventory_handler(message: Message, query: CallbackQuery):
    user_id = query.from_user.id
    action = query.data.split(":", 1)[1]

    if action == "main":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä—ã", callback_data="inventory:boosters")],
            [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="profile:refresh")]
        ])
        await query.message.answer("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞", reply_markup=kb)
        return

    if action == "boosters":
        elixirs = await get_user_elixirs(user_id)
        rows = []
        
        luck_count = sum(1 for e in elixirs if e["type"] == "luck")
        time_count = sum(1 for e in elixirs if e["type"] == "time")
        
        if luck_count:
            rows.append([InlineKeyboardButton(
                text=f"üçÄ –£–¥–∞—á–∞ [{luck_count} —à—Ç.]", 
                callback_data="inventory:boost:luck"
            )])
        if time_count:
            rows.append([InlineKeyboardButton(
                text=f"‚è≥ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ [{time_count} —à—Ç.]",
                callback_data="inventory:boost:time"
            )])
            
        rows.append([InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="inventory:main")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        
        if not elixirs:
            text = "‚ö°Ô∏è <b>–ë—É—Å—Ç–µ—Ä—ã</b>\n<blockquote>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—É—Å—Ç–µ—Ä–æ–≤</blockquote>"
        else:
            text = "‚ö°Ô∏è <b>–ë—É—Å—Ç–µ—Ä—ã</b>\n<blockquote>–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Å—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</blockquote>"
            
        await query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        return

    if action.startswith("boost:"):
        boost_type = action.split(":", 1)[1]
        elixirs = await get_user_elixirs(user_id)
        count = sum(1 for e in elixirs if e["type"] == boost_type)
        
        if boost_type == "luck":
            name = "üçÄ –£–¥–∞—á–∞"
            desc = "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏ –Ω–∞ 25%"
        else:
            name = "‚è≥ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"
            desc = "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ 1 —á–∞—Å"
            
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"inventory:activate:{boost_type}")],
            [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="inventory:boosters")]
        ])
        
        text = f"‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä—ã [{name}] [{count} —à—Ç.]\n{desc}"
        await query.message.edit_text(text, reply_markup=kb)
        return

    if action.startswith("activate:"):
        boost_type = action.split(":", 1)[1]

        if boost_type == "luck":
            await consume_first_of_type(user_id, "luck")
            text = ("üçÄ –ë—É—Å—Ç–µ—Ä <b>¬´—É–¥–∞—á–∞¬ª</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                    "<blockquote>–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</blockquote>")
        else:
            remaining = await get_remaining_time(user_id)
            if remaining > 0:
                await consume_first_of_type(user_id, "time")
                await reduce_cooldown(user_id, 3600)
                text = "‚è≥ –ë—É—Å—Ç–µ—Ä <b>¬´–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏¬ª</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n<blockquote>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 1 —á–∞—Å</blockquote>"
            else:
                text = "‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—ã–≤–∞—Ç—å ¬´—Ö–æ–º—è–∫¬ª, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É—Å—Ç–µ—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n‚ùå –ò–ª–∏ –∂–µ –≤–∞—à–µ –ö–î –º–µ–Ω—å—à–µ —á–∞—Å–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É—Å—Ç–µ—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
                return

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥ –∫ –±—É—Å—Ç–µ—Ä–∞–º", callback_data="inventory:boosters")]
        ])
        await query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        return