from aiogram import Router, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, LabeledPrice
from aiogram.methods import CreateInvoiceLink
from pathlib import Path
from ..config import SETTINGS
from ..database.money import get_money, add_money
from ..database.shoph import list_items, get_item
from ..database.cards import add_card
from ..database.elixir import add_elixir
from aiogram.filters import Command
from ..database.shoph import list_items, get_item, reduce_stock
from ..database.shopbuyers import has_bought, record_purchase
from ..database.rarity import get_rarity, RARITY_POINTS, RARITY_NAMES
from ..database.premium import is_premium_active
from ..database.bonus import get_bonus
from ..database.scores import add_score, get_score
from ..database.bundles import list_bundles, get_bundle, reduce_bundle_stock

router = Router()

COINS_TO_STARS = {
        50: 7,
        100: 13,
        200: 25,
        300: 44,
        400: 55,
        500: 71,
        800: 114,
        1000: 142,
        1500: 214,
        2000: 285,
    }

HOMYAK_FILES_DIR = Path(__file__).parent.parent / "files"
def make_main_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚Ä¢ –ú–æ–Ω–µ—Ç—ã ‚Ä¢", callback_data="shop:coins"),
            InlineKeyboardButton(text="‚Ä¢ –ë—É—Å—Ç–µ—Ä—ã ‚Ä¢", callback_data="shop:boosters")
        ],
        [InlineKeyboardButton(text="‚Ä¢ –ù–∞–±–æ—Ä—ã ‚Ä¢", callback_data="shop:bundles"),
        InlineKeyboardButton(text="‚Ä¢ –•–æ–º—è–∫–∏ ‚Ä¢", callback_data="shop:cards")],
    ])
    return kb

@router.message(Command(commands=["shop"]))
async def shop_command(message: Message):
    if message.chat.type != "private":
        bot_link = "https://t.me/homyakadventbot?start=shop"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url=bot_link)]
        ])
        await message.answer(
            "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            reply_markup=keyboard,
            reply_to_message_id=message.message_id
        )
        return
    await show_shop_menu(message)

async def show_shop_menu(message: Message):
    await message.answer("üè™ –í—ã –ø–æ–ø–∞–ª–∏ –≤ <b>–º–∞–≥–∞–∑–∏–Ω</b>!\n\n‚õÑ –í –º–∞–≥–∞–∑–∏–Ω–µ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±–µ—Ä—Å—Ç–∏: –±—É—Å—Ç–µ—Ä—ã, —Ö–æ–º—è–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç—ã.\n\n‚≠ê –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –≤–∞–ª—é—Ç—É Telegram Stars –∏ –≤–Ω—É—Ç—Ä–µ–Ω—é—é –≤–∞–ª—é—Ç—É –±–æ—Ç–∞ - –ú–æ–Ω–µ—Ç—ã.", reply_markup=make_main_keyboard())

@router.callback_query(F.data.startswith("shop:"))
async def shop_callbacks(query: CallbackQuery):
    data = query.data
    if data == "shop:coins":
        amounts = list(COINS_TO_STARS.items())
        rows = []
        for i in range(0, len(amounts), 3):
            row = []
            for coins, stars in amounts[i:i+3]:
                row.append(
                    InlineKeyboardButton(
                        text=f"üí∞ {coins} ‚Äî {stars} ‚≠ê",
                        callback_data=f"shop:buycoins:{coins}"
                    )
                )
            rows.append(row)
        rows.append([InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:main")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await query.message.edit_text("üí∞<b>–ú–æ–Ω–µ—Ç—ã</b>\n<blockquote>–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –º–æ–∂–Ω–æ –¢–û–õ–¨–ö–û –∑–∞ –∑–≤–µ–∑–¥—ã</blockquote>", reply_markup=kb, parse_mode="HTML")
        await query.answer()
        return

    if data == "shop:boosters":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üçÄ –£–¥–∞—á–∞ ‚Äî 40 –º–æ–Ω–µ—Ç", callback_data="shop:boost:luck")],
            [InlineKeyboardButton(text="‚è≥ –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ ‚Äî 30 –º–æ–Ω–µ—Ç", callback_data="shop:boost:time")],
            [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:main")]
        ])
        await query.message.edit_text("‚ö°Ô∏è<b>–ë—É—Å—Ç–µ—Ä—ã</b>\n\n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–∞–∑–Ω—ã–µ –±—É—Å—Ç–µ—Ä—ã, –Ω–∞ —É–¥–∞—á—É –∏–ª–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏", reply_markup=kb, parse_mode="HTML")
        await query.answer()
        return

    if data == "shop:cards":
        items = await list_items()
        if not items:
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:main")]])
            await query.message.answer("üò≠ –ù–µ —É–¥–∞—á–∞!\n\n–ü–æ–∫–∞ —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ö–æ–º—è–∫–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –±—É–¥—É—â–µ–º", reply_markup=kb, parse_mode="HTML")
            await query.answer()
            return
        rows = []
        for it in items:
            stock_text = "‚àû" if it["stock"] == 0 else str(it["stock"])
            rows.append([InlineKeyboardButton(text=f"{it['name']} ‚Ä¢ {it['price_coins']} –º–æ–Ω–µ—Ç / {it['price_stars']} ‚≠ê ‚Ä¢ {stock_text}", callback_data=f"shop:card:{it['id']}")])
        rows.append([InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:main")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await query.message.answer("üòé <b>–•–æ–º—è–∫–∏</b>\n\nü§î –í –¥–∞–Ω–Ω–æ–º —Ä–∞–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–º—è–∫–æ–≤ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é ¬´–°–µ–∫—Ä–µ—Ç–Ω—ã–π¬ª, –¥—Ä—É–≥–∏—Ö –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å.", reply_markup=kb, parse_mode="HTML")
        await query.answer()
        return

    if data == "shop:main":
        await query.message.edit_text("üè™ –í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n‚õÑ –í –º–∞–≥–∞–∑–∏–Ω–µ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±–µ—Ä—Å—Ç–∏: –±—É—Å—Ç–µ—Ä—ã, —Ö–æ–º—è–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç—ã.\n\n‚≠ê –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –≤–∞–ª—é—Ç—É Telegram Stars –∏ –≤–Ω—É—Ç—Ä–µ–Ω—é—é –≤–∞–ª—é—Ç—É –±–æ—Ç–∞ - –ú–æ–Ω–µ—Ç—ã.", parse_mode="HTML", reply_markup=make_main_keyboard())
        await query.answer()
        return

    if data.startswith("shop:buycoins:"):
            coins = int(data.split(":", 2)[2])
            stars_price = COINS_TO_STARS.get(coins)
            if stars_price is None:
                await query.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞", show_alert=True)
                return
            try:
                link = await query.bot.create_invoice_link(
                    title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–Ω–µ—Ç: {coins}",
                    description=f"–ü–æ–∫—É–ø–∫–∞ {coins} –º–æ–Ω–µ—Ç",
                    payload=f"topup:{coins}",
                    provider_token="",
                    currency="XTR",
                    prices=[LabeledPrice(label=f"{coins} –º–æ–Ω–µ—Ç", amount=stars_price)]
                )

                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å {coins} –º–æ–Ω–µ—Ç –∑–∞ {stars_price} ‚≠ê", url=link)],
                    [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:coins")]
                ])
                await query.message.edit_text(f"üí∏ –ü–æ–∫—É–ø–∫–∞ {coins} –º–æ–Ω–µ—Ç ‚Äî —Ü–µ–Ω–∞ {stars_price} ‚≠ê", reply_markup=kb)
                await query.answer()
                return
            except Exception as e:
                print(f"Error creating invoice link: {e}")
                await query.answer("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", show_alert=True)
                return

    if data.startswith("shop:buycoins_fallback:"):
        amount = int(data.split(":",2)[2])
        provider = SETTINGS.get("STARS_PROVIDER_TOKEN")
        currency = SETTINGS.get("STARS_CURRENCY", "RUB")
        title = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–Ω–µ—Ç: {amount}"
        description = f"–ü–æ–∫—É–ø–∫–∞ {amount} –º–æ–Ω–µ—Ç"
        price_value = amount * 100
        prices = [LabeledPrice(label=f"{amount} –º–æ–Ω–µ—Ç", amount=price_value)]
        try:
            link = await CreateInvoiceLink(title=title, description=description, payload=f"topup:{amount}", provider_token=provider, currency=currency, prices=prices).send(query.bot)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=link.url)],
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:coins")]
            ])
            await query.message.edit_text("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", reply_markup=kb)
            await query.answer()
            return
        except Exception:
            await query.answer("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", show_alert=True)
            return

    if data.startswith("shop:boost:"):
        typ = data.split(":",2)[2]
        price_coins = 100 if typ == "luck" else 70
        price_stars = 9 if typ == "luck" else 8

        text = ("üçÄ –ë—É—Å—Ç–µ—Ä ¬´—É–¥–∞—á–∞¬ª\n–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç –Ω–∞ 35%\n"
               f"üí∞ –¶–µ–Ω–∞ ‚Ä¢ {price_coins} –º–æ–Ω–µ—Ç –∏–ª–∏ {price_stars} ‚≠ê\n"
               "‚åöÔ∏è –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è ‚Ä¢ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
               if typ == "luck" else
               "‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä ¬´–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏¬ª\n–°–æ–∫—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ 1 —á–∞—Å\n"
               f"üí∞ –¶–µ–Ω–∞ ‚Ä¢ {price_coins} –º–æ–Ω–µ—Ç –∏–ª–∏ {price_stars} ‚≠ê\n"
               "‚åöÔ∏è –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è ‚Ä¢ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")

        try:
            link = await query.bot.create_invoice_link(
                title=f"–ë—É—Å—Ç–µ—Ä {typ}",
                description=f"–ü–æ–∫—É–ø–∫–∞ –±—É—Å—Ç–µ—Ä–∞ {typ}",
                payload=f"boost:{typ}",
                provider_token="",
                currency="XTR",
                prices=[LabeledPrice(label=f"–ë—É—Å—Ç–µ—Ä {typ}", amount=price_stars)]
            )

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç—ã ({price_coins})", callback_data=f"shop:buy_boost_coins:{typ}")],
                [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ {price_stars} ‚≠ê", url=link)],
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:boosters")]
            ])

            await query.message.edit_text(text, reply_markup=kb)
            await query.answer()
            return
        except Exception as e:
            print(f"Error creating invoice link: {e}")
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç—ã ({price_coins})", callback_data=f"shop:buy_boost_coins:{typ}")],
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:boosters")]
            ])
            await query.message.edit_text(text, reply_markup=kb)
            await query.answer("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", show_alert=True)
            return

    if data.startswith("shop:buy_boost_stars_fallback:"):
        typ = data.split(":",2)[2]
        price_stars = 8 if typ=="luck" else 7
        provider = SETTINGS.get("STARS_PROVIDER_TOKEN")
        currency = SETTINGS.get("STARS_CURRENCY", "RUB")
        title = f"–ë—É—Å—Ç–µ—Ä {typ}"
        description = f"–ü–æ–∫—É–ø–∫–∞ –±—É—Å—Ç–µ—Ä–∞ {typ}"
        price_value = price_stars * 100
        prices = [LabeledPrice(label=f"{price_stars} ‚≠ê", amount=price_value)]
        try:
            link = await CreateInvoiceLink(title=title, description=description, payload=f"boost:{typ}", provider_token=provider, currency=currency, prices=prices).send(query.bot)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=link.url)],
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:boosters")]
            ])
            await query.message.edit_text("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", reply_markup=kb)
            await query.answer()
            return
        except Exception:
            await query.answer("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", show_alert=True)
            return

    if data.startswith("shop:buy_boost_coins:"):
        typ = data.split(":",3)[2]
        price = 100 if typ =="luck" else 70
        user_id = query.from_user.id
        bal = await get_money(user_id)
        if bal < price:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", show_alert=True)
            return
        await add_money(user_id, -price)
        await add_elixir(user_id, typ)
        booster_name = "¬´—É–¥–∞—á–∞¬ª" if typ == "luck" else "¬´—É—Å–∫–æ—Ä–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏¬ª"
        await query.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –±—É—Å—Ç–µ—Ä {booster_name}.\n\nüéí –û–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ /profile.")
        await query.answer()
        return

    if data.startswith("shop:buy_boost_stars:"):
        typ = data.split(":",3)[2]
        price_stars = 9 if typ=="luck" else 8
        provider = SETTINGS.get("STARS_PROVIDER_TOKEN")
        currency = SETTINGS.get("STARS_CURRENCY", "RUB")
        title = f"–ë—É—Å—Ç–µ—Ä {typ}"
        description = f"–ü–æ–∫—É–ø–∫–∞ –±—É—Å—Ç–µ—Ä–∞ {typ}"
        price_value = price_stars * 100
        prices = [LabeledPrice(label=f"{price_stars} ‚≠ê", amount=price_value)]
        try:
            link = await CreateInvoiceLink(title=title, description=description, payload=f"boost:{typ}", provider_token=provider, currency=currency, prices=prices).send(query.bot)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=link.url)],
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:boosters")]
            ])
            await query.message.edit_text("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", reply_markup=kb)
            await query.answer()
            return
        except Exception:
            await query.answer("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", show_alert=True)
            return

    if data.startswith("shop:card:"):
        item_id = int(data.split(":", 2)[2])
        item = await get_item(item_id)
        if not item:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        file_path = Path(HOMYAK_FILES_DIR) / item["filename"]
        if not file_path.exists():
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (accuraced)", show_alert=True)
            return

        original_rarity = await get_rarity(item["filename"])
        display_rarity = original_rarity
        is_prem = await is_premium_active(query.from_user.id)
        points = RARITY_POINTS[display_rarity]
        if is_prem:
            points += 1000
        bonus_info = await get_bonus(query.from_user.id)
        if bonus_info and bonus_info.get("is_active"):
            points += 700 if (bonus_info.get("is_premium_at_activation") or is_prem) else 500
        total_score, _ = await get_score(query.from_user.id)

        caption_lines = [
            f"–•–æ–º—è–∫ ¬´{item['name']}¬ª",
            "",
            f"üíé –†–µ–¥–∫–æ—Å—Ç—å ‚Ä¢ {RARITY_NAMES[display_rarity]}",
            f"‚ú® –û—á–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ ‚Ä¢ +{points:,} [{total_score:,}]",
            f"üí∞ –¶–µ–Ω–∞ ‚Ä¢ {item['price_coins']} –º–æ–Ω–µ—Ç –∏–ª–∏ {item['price_stars']} ‚≠ê",
            f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {'–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ' if item['stock'] == 0 else item['stock']}"
        ]
        caption = "\n".join(caption_lines)

        try:
            link = await query.bot.create_invoice_link(
                title=f"–•–æ–º—è–∫ {item['name']}",
                description=f"–ü–æ–∫—É–ø–∫–∞ —Ö–æ–º—è–∫–∞ {item['name']}",
                payload=f"cardbuy:{item_id}",
                provider_token="",
                currency="XTR",
                prices=[LabeledPrice(label=f"–•–æ–º—è–∫ {item['name']}", amount=item["price_stars"])]
            )
            stars_btn = InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ {item['price_stars']} ‚≠ê", url=link)
        except Exception as e:
            print(f"error creating invoice link: {e}")
            stars_btn = InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ {item['price_stars']} ‚≠ê", callback_data=f"shop:buy_card_stars_fallback:{item_id}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç—ã ({item['price_coins']})", callback_data=f"shop:buy_card_coins:{item_id}")],
            [stars_btn],
            [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:cards")]
        ])

        await query.message.answer_photo(photo=FSInputFile(file_path), caption=caption, reply_markup=kb)
        await query.answer()
        return

    if data.startswith("shop:buy_card_coins:"):
        item_id = int(data.split(":",2)[2])
        item = await get_item(item_id)
        if not item:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        user_id = query.from_user.id

        if await has_bought(user_id, item_id):
            await query.answer("‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ö–æ–º—è–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞, –≤—ã —É–∂–µ –ø–æ–∫—É–ø–∞–ª–∏ –µ–≥–æ.", show_alert=True)
            return
        bal = await get_money(user_id)
        if bal < item["price_coins"]:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", show_alert=True)
            return

        ok = await reduce_stock(item_id)
        if not ok:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            return

        await add_money(user_id, -item["price_coins"])
        await add_card(user_id, item["filename"])
        original_rarity = await get_rarity(item["filename"])
        points = RARITY_POINTS[original_rarity]
        if await is_premium_active(user_id):
            points += 1000
        bonus_info = await get_bonus(user_id)
        if bonus_info and bonus_info["is_active"]:
            points += 700 if (bonus_info["is_premium_at_activation"] or await is_premium_active(user_id)) else 500
        await add_score(user_id, points, item["name"], chat_id=query.message.chat.id)
        await record_purchase(user_id, item_id, item["filename"])
        total_score, _ = await get_score(user_id)
        caption = (
            f"–í—ã –∫—É–ø–∏–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∫–∞—Ä—Ç–æ—á–∫—É ¬´{item['name']}¬ª!\n\n"
            f"üíé –†–µ–¥–∫–æ—Å—Ç—å ‚Ä¢ {RARITY_NAMES[original_rarity]}\n"
            f"‚ú® –û—á–∫–∏ ‚Ä¢ +{points:,} [{total_score:,}]\n"
            f"üîÅ –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É –≤–∞—Å —É–∂–µ –±—ã–ª–∞, –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—á–∫–∏."
        )
        file_path = Path(HOMYAK_FILES_DIR) / item["filename"]
        await query.message.answer_photo(photo=FSInputFile(file_path), caption=caption)
        await query.answer()
        return

    if data.startswith("shop:buy_card_stars:"):
        item_id = int(data.split(":",2)[2])
        item = await get_item(item_id)
        if not item:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        provider = SETTINGS.get("STARS_PROVIDER_TOKEN")
        currency = SETTINGS.get("STARS_CURRENCY", "RUB")
        title = f"–•–æ–º—è–∫ {item['name']}"
        description = f"–ü–æ–∫—É–ø–∫–∞ —Ö–æ–º—è–∫–∞ {item['name']}"
        price_value = item["price_stars"] * 100
        prices = [LabeledPrice(label=f"{item['price_stars']} ‚≠ê", amount=price_value)]
        try:
            link = await CreateInvoiceLink(title=title, description=description, payload=f"cardbuy:{item_id}", provider_token=provider, currency=currency, prices=prices).send(query.bot)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=link.url)],
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data=f"shop:card:{item_id}")]
            ])
            await query.message.edit_text("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", reply_markup=kb)
            await query.answer()
            return
        except Exception:
            await query.answer("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", show_alert=True)
            return
        
    if data == "shop:bundles":
        bundles = await list_bundles()
        if not bundles:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:main")]
            ])
            await query.message.edit_text(
                "üì¶ <b>–ù–∞–±–æ—Ä—ã</b>\n\n–ü–æ–∫–∞ –Ω–∞–±–æ—Ä–æ–≤ –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!",
                reply_markup=kb, parse_mode="HTML"
            )
            await query.answer()
            return

        rows = []
        for b in bundles:
            stock_text = "‚àû" if b["stock"] == 0 else str(b["stock"])
            rows.append([
                InlineKeyboardButton(
                    text=f"{b['name']} ‚Ä¢ {b['price_coins']} –º–æ–Ω–µ—Ç / {b['price_stars']} ‚≠ê ‚Ä¢ {stock_text}",
                    callback_data=f"shop:bundle:{b['id']}"
                )
            ])
        rows.append([InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:main")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await query.message.edit_text(
            "üì¶ <b>–ù–∞–±–æ—Ä—ã</b>\n\n–ö–æ–º–ø–ª–µ–∫—Ç—ã –∏–∑ 2‚Äì3+ —Ö–æ–º—è–∫–æ–≤. –í—ã–≥–æ–¥–Ω–µ–µ, —á–µ–º –±—Ä–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É.",
            reply_markup=kb, parse_mode="HTML"
        )
        await query.answer()
        return

    # --- –ù–ê–ë–û–†–´: –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–±–æ—Ä–∞ ---
    if data.startswith("shop:bundle:"):
        bundle_id = int(data.split(":", 2)[2])
        bundle = await get_bundle(bundle_id)
        if not bundle:
            await query.answer("‚ùå –ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # bundle = { id, name, price_coins, price_stars, stock, filenames: [str,...] }
        filenames = bundle.get("filenames", [])
        count = len(filenames)

        # —Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏ (–∫–∞–∫ —Å—É–º–º–∞ –ø–æ –∫–∞—Ä—Ç–∞–º —Å –±–æ–Ω—É—Å–∞–º–∏/–ø—Ä–µ–º–∏—É–º–æ–º)
        user_id = query.from_user.id
        is_prem = await is_premium_active(user_id)
        bonus_info = await get_bonus(user_id)
        total_score_now, _ = await get_score(user_id)

        points_sum = 0
        for fn in filenames:
            r = await get_rarity(fn)
            pts = RARITY_POINTS[r]
            if is_prem:
                pts += 1000
            if bonus_info and bonus_info.get("is_active"):
                pts += 700 if (bonus_info.get("is_premium_at_activation") or is_prem) else 500
            points_sum += pts

        names_list = []
        for fn in filenames:
            names_list.append(Path(fn).stem)

        caption_lines = [
            f"üì¶ –ù–∞–±–æ—Ä ¬´{bundle['name']}¬ª",
            "",
            f"üë• –í –Ω–∞–±–æ—Ä–µ ‚Ä¢ {count} —Ö–æ–º—è–∫–∞(–æ–≤)",
            "‚Äî " + "\n‚Äî ".join(names_list) if names_list else "",
            "",
            f"‚ú® –û—á–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ ‚Ä¢ +{points_sum:,} [{total_score_now:,}]",
            f"üí∞ –¶–µ–Ω–∞ ‚Ä¢ {bundle['price_coins']} –º–æ–Ω–µ—Ç –∏–ª–∏ {bundle['price_stars']} ‚≠ê",
            f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {'–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ' if bundle['stock'] == 0 else bundle['stock']}"
        ]
        caption = "\n".join([ln for ln in caption_lines if ln is not None])

        # –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –ø—Ä–µ–≤—å—é (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        preview_path = None
        for fn in filenames:
            p = Path(HOMYAK_FILES_DIR) / fn
            if p.exists():
                preview_path = p
                break

        # Stars-–∏–Ω–≤–æ–∏—Å (–æ—Å–Ω–æ–≤–Ω–æ–π), —Å —Ñ–æ–ª–ª–±–µ–∫–æ–º
        try:
            link = await query.bot.create_invoice_link(
                title=f"–ù–∞–±–æ—Ä {bundle['name']}",
                description=f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞–±–æ—Ä–∞ {bundle['name']}",
                payload=f"bundlebuy:{bundle_id}",
                provider_token="",
                currency="XTR",
                prices=[LabeledPrice(label=f"–ù–∞–±–æ—Ä {bundle['name']}", amount=bundle["price_stars"])]
            )
            stars_btn = InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ {bundle['price_stars']} ‚≠ê", url=link)
        except Exception as e:
            print(f"Error creating bundle invoice: {e}")
            stars_btn = InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ {bundle['price_stars']} ‚≠ê", callback_data=f"shop:buy_bundle_stars_fallback:{bundle_id}")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∑–∞ –º–æ–Ω–µ—Ç—ã ({bundle['price_coins']})", callback_data=f"shop:buy_bundle_coins:{bundle_id}")],
            [stars_btn],
            [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data="shop:bundles")]
        ])

        if preview_path:
            await query.message.answer_photo(photo=FSInputFile(preview_path), caption=caption, reply_markup=kb)
        else:
            await query.message.answer(caption, reply_markup=kb, parse_mode="HTML")

        await query.answer()
        return

    # --- –ù–ê–ë–û–†–´: –ø–æ–∫—É–ø–∫–∞ –∑–∞ –º–æ–Ω–µ—Ç—ã ---
    if data.startswith("shop:buy_bundle_coins:"):
        bundle_id = int(data.split(":", 2)[2])
        bundle = await get_bundle(bundle_id)
        if not bundle:
            await query.answer("‚ùå –ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        user_id = query.from_user.id
        bal = await get_money(user_id)
        if bal < bundle["price_coins"]:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", show_alert=True)
            return

        ok = await reduce_bundle_stock(bundle_id)
        if not ok:
            await query.answer("‚ùå –ù–∞–±–æ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            return

        await add_money(user_id, -bundle["price_coins"])

        # –≤—ã–¥–∞—ë–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –Ω–∞–±–æ—Ä–∞
        filenames = bundle.get("filenames", [])
        gained_points = 0
        is_prem = await is_premium_active(user_id)
        bonus_info = await get_bonus(user_id)

        for fn in filenames:
            await add_card(user_id, fn)
            r = await get_rarity(fn)
            pts = RARITY_POINTS[r]
            if is_prem:
                pts += 1000
            if bonus_info and bonus_info.get("is_active"):
                pts += 700 if (bonus_info.get("is_premium_at_activation") or is_prem) else 500
            gained_points += pts
            # –∏–º—è –¥–ª—è –ª–æ–≥–∞ –æ—á–∫–æ–≤ ‚Äî –ø–æ —Å—Ç–µ–º—É
            await add_score(user_id, pts, Path(fn).stem, chat_id=query.message.chat.id)

        total_score_after, _ = await get_score(user_id)

        await query.message.answer(
            f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –Ω–∞–±–æ—Ä ¬´{bundle['name']}¬ª!\n\n"
            f"üë• –í—ã–¥–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(filenames)}\n"
            f"‚ú® –û—á–∫–∏ ‚Ä¢ +{gained_points:,} [{total_score_after:,}]"
        )
        await query.answer()
        return

    if data.startswith("shop:buy_bundle_stars_fallback:"):
        bundle_id = int(data.split(":", 2)[2])
        bundle = await get_bundle(bundle_id)
        if not bundle:
            await query.answer("‚ùå –ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        provider = SETTINGS.get("STARS_PROVIDER_TOKEN")
        currency = SETTINGS.get("STARS_CURRENCY", "RUB")
        title = f"–ù–∞–±–æ—Ä {bundle['name']}"
        description = f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞–±–æ—Ä–∞ {bundle['name']}"
        price_value = bundle["price_stars"] * 100
        prices = [LabeledPrice(label=f"{bundle['price_stars']} ‚≠ê", amount=price_value)]
        try:
            link = await CreateInvoiceLink(
                title=title, description=description, payload=f"bundlebuy:{bundle_id}",
                provider_token=provider, currency=currency, prices=prices
            ).send(query.bot)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=link.url)],
                [InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data=f"shop:bundle:{bundle_id}")]
            ])
            await query.message.edit_text(
                "–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", reply_markup=kb
            )
            await query.answer()
            return
        except Exception:
            await query.answer("–ø—Ä–∏–≤–µ—Ç —ç—Ç–æ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ @ceotraphouse –∏ –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é", show_alert=True)
            return