from aiogram import Router
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from pathlib import Path
from datetime import datetime
from ..database.users import add_user_and_check
from ..admin_logs.logger import notify_new_user
from ..database.premium import get_premium

router = Router()

WELCOME_VIDEO_PATH = Path(__file__).parent.parent / "files" / "welcome.mp4"

@router.message(Command("start"))
async def cmd_start(message: Message):
    args = message.text.split(maxsplit=1)
    payload = args[1] if len(args) > 1 else None

    user = message.from_user
    is_new = await add_user_and_check(user.id, user.username, user.first_name, user.last_name)
    if is_new:
        await notify_new_user(message.bot, user)

    if payload == "bonus":
        from .bonus import show_bonus_menu
        await show_bonus_menu(message)
        return
    
    if payload == "premium":
        from .premium import show_premium_menu
        await show_premium_menu(message)
        return
    if payload == "shop":
        from .shop import show_shop_menu
        await show_shop_menu(message)
        return
    if payload == "inventory":
        from .inventory import inventory_handler
        await inventory_handler(message)
        return
    if payload == "profile":
        from .profile import cmd_profile
        await cmd_profile(message)
        return

    premium_info = await get_premium(user.id)
    premium_text = ""
    premium_ad = ""
    if premium_info:
        if premium_info["is_lifetime"]:
            premium_text = "\nüëë –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω Premium (–Ω–∞–≤—Å–µ–≥–¥–∞)!"
        elif premium_info["expires_at"]:
            expires_date = datetime.fromisoformat(premium_info["expires_at"]).strftime("%d.%m.%Y")
            premium_text = f"\nüëë Premium –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {expires_date}!"
    else:
        premium_ad = "\nüí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-–ø–æ–¥–ø–∏—Å–∫—É. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /premium"

    if not WELCOME_VIDEO_PATH.exists():
        await message.answer("‚ö†Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        caption = (
            "‚≠êÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Homyak –ê–¥–≤–µ–Ω—Ç-–ö–∞–ª–µ–Ω–¥–∞—Ä—å!\n\n"
            "üéÅ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –í–∞—Å –∂–¥—É—Ç –ª—é–±–∏–º—ã–µ —Ö–æ–º—è–∫–∏.\n"
            "  ‚îî –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Ö–æ–º—è–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –≤—ã —Ö–æ–º—è–∫!\n\n"
            "üêπ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´—Ö–æ–º—è–∫¬ª ‚Äî –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–µ–≥–æ —Ö–æ–º—è–∫–∞!"
            f"{premium_text}"
            f"{premium_ad}"
        )
        await message.answer_video(video=FSInputFile(WELCOME_VIDEO_PATH), caption=caption, reply_to_message_id=message.message_id, parse_mode="HTML")